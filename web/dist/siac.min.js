(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/** PDF search */
window.pdfSearchOngoing = false;
window.pdfCurrentSearch = {
    query: null,
    lastStart: null,
    lastEnd: null,
    breakOnNext: null
};

/**
 * ###########################################
 *  PDF Search
 * ###########################################
 */

window.onPDFSearchBtnClicked = function(elem) {
    if ($(elem).hasClass("expanded")) {
        $(elem).find("input").focus();
    } else {
        $(elem).find("input").val("");
        pdfCurrentSearch = { query: null, lastEnd: null, lastStart: null };
    }
}
window.onPDFSearchInput = function(value, event) {
    if (event.keyCode === 13 && value && value.trim().length) {
        readerNotification("Searching ...");
        if (value.toLowerCase() !== pdfCurrentSearch.query) {
            pdfCurrentSearch.lastStart = null;
            pdfCurrentSearch.lastEnd = null;
            pdfCurrentSearch.query = value.toLowerCase();
        }
        setTimeout(function () {
            nextPDFSearchResult();
        }, 10);
    }
}
window.getContents = async function(s = 1, n = 10000) {
    var countPromises = [];
    for (var j = s; j <= pdfDisplayed.numPages && j <= s + n; j++) {
        var page = pdfDisplayed.getPage(j);
        countPromises.push(page.then(function (page) {
            var n = page.pageIndex + 1;
            var txt = "";
            var textContent = page.getTextContent();
            return textContent.then(function (page) {
                for (var i = 0; i < page.items.length; i++) {
                    txt += " " + page.items[i].str;
                }
                return { page: n, text: txt.toLowerCase() };
            });
        }));
    }
    return Promise.all(countPromises).then(function (counts) {
        return counts;
    });
}
window.resetSearch = function() {
    pdfCurrentSearch.lastStart = null;
    pdfCurrentSearch.lastEnd = null;
}
window.nextPDFSearchResult = async function (dir = "right") {
    if (pdfSearchOngoing) {
        return;
    }
    let value = $("#siac-pdf-search-btn-inner input").first().val().toLowerCase();
    if (pdfCurrentSearch.query === null) {
        pdfCurrentSearch.query = value;
    } else {
        if (value !== pdfCurrentSearch.query || (pdfDisplayedCurrentPage !== pdfCurrentSearch.lastStart && pdfCurrentSearch.lastStart === pdfCurrentSearch.lastEnd)) {
            pdfCurrentSearch.lastStart = null;
            pdfCurrentSearch.lastEnd = null;
            pdfCurrentSearch.query = value;
        }
    }
    if (!pdfCurrentSearch.query) {
        return;
    }
    pdfCurrentSearch.breakOnNext = false;
    pdfSearchOngoing = true;
    greyoutBottom();

    var shouldBreak = false;
    var found = false;
    var spl = pdfCurrentSearch.query.toLowerCase().split(" ");
    var it = 0;
    do {
        it++;
        var next = getNextPagesToSearchIn(dir);
        if (dir === "left")
            var pdfPagesContents = (await getContents(next.s, next.n)).reverse();
        else
            var pdfPagesContents = await getContents(next.s, next.n);
        if (pdfPagesContents.length === 0) {
            shouldBreak = true;
        }
        for (var n = 0; n < pdfPagesContents.length; n++) {
            if (shouldBreak)
                break;
            for (var i = 0; i < spl.length; i++) {
                if (pdfPagesContents[n].text.indexOf(spl[i]) !== -1) {
                    if (pdfDisplayedCurrentPage === pdfPagesContents[n].page) {
                        readerNotification("Text found on current page", true);
                    } else {
                        readerNotification("Text found on page " + pdfPagesContents[n].page, true);
                    }
                    pdfDisplayedCurrentPage = pdfPagesContents[n].page;
                    queueRenderPage(pdfDisplayedCurrentPage, true, false, false, pdfCurrentSearch.query);
                    pdfCurrentSearch.lastStart = pdfDisplayedCurrentPage;
                    pdfCurrentSearch.lastEnd = pdfDisplayedCurrentPage;
                    shouldBreak = true;
                    found = true;
                    break;
                }
            }
        }
        if (it > Math.round(pdfDisplayed.numPages / 25.0) + 2) {
            readerNotification("Search aborted, took too long.", true);
            break;
        }
    } while (!shouldBreak);

    if (!found) {
        readerNotification("Text was not found.", true);
        ungreyoutBottom();
    }
    pdfSearchOngoing = false;
}
window.getNextPagesToSearchIn = function(dir) {
    if (pdfCurrentSearch.breakOnNext) {
        return [];
    }
    let lastStart = pdfCurrentSearch.lastStart;
    let lastEnd = pdfCurrentSearch.lastEnd;
    let ivl = 25;
    let s = -1;
    let n = ivl;

    if (dir === "left") {
        // button or enter just pressed
        if (lastStart === null) {
            s = Math.max(pdfDisplayedCurrentPage - ivl, 1);
            n = Math.min(ivl, pdfDisplayedCurrentPage - s);
        }
        // last search block was up to first page, so start at the end
        else if (lastStart === 1) {
            s = Math.max(pdfDisplayed.numPages - ivl, 1);
        }
        // page rendered with highlighted search results 
        else if (lastEnd === lastStart && lastEnd !== 1 && pdfDisplayed.numPages > 1) {
            s = Math.max(lastStart - ivl - 1, 1);
            if (s === 1)
                n = Math.max(0, Math.min(ivl, pdfDisplayedCurrentPage - 3));
            else
                n = Math.min(ivl, pdfDisplayedCurrentPage - s - 1);
        }
        // else
        else {
            s = Math.max(lastStart - ivl, 1);
            if (s === 1)
                n = Math.max(0, lastStart - 2);
        }
        // went from end of pdf to search start again, so stop
        if (lastStart !== null && lastStart > pdfDisplayedCurrentPage && s <= pdfDisplayedCurrentPage) {
            s = pdfDisplayedCurrentPage;
            pdfCurrentSearch.breakOnNext = true;
        }
        // 1 page, so range to look at should be 1 and stop after
        else if (pdfDisplayed.numPages === 1) {
            n = 0;
            pdfCurrentSearch.breakOnNext = true;
        }

    } else {
        if (lastStart === null) {
            s = pdfDisplayedCurrentPage;
            n = Math.min(pdfDisplayed.numPages - s, ivl);
        }
        else if (lastEnd === pdfDisplayed.numPages) {
            s = 1;
            n = Math.min(ivl, pdfDisplayed.numPages);
        } else {
            s = lastEnd + 1;
            n = Math.min(pdfDisplayed.numPages - s, ivl);
        }
        if (lastEnd !== null && lastEnd < pdfDisplayedCurrentPage && s + ivl >= pdfDisplayedCurrentPage) {
            n = pdfDisplayedCurrentPage - s;
            pdfCurrentSearch.breakOnNext = true;
        } else if (lastEnd !== null && lastEnd === pdfDisplayed.numPages && 1 + ivl >= pdfDisplayedCurrentPage) {
            n = pdfDisplayedCurrentPage - s;
            pdfCurrentSearch.breakOnNext = true;
        }

        else if (pdfDisplayed.numPages === 1) {
            n = 0;
            pdfCurrentSearch.breakOnNext = true;
        }
    }
    if (s === 1 && pdfDisplayed.numPages <= n) {
        pdfCurrentSearch.breakOnNext = true;
    }
    pdfCurrentSearch.lastStart = s;
    pdfCurrentSearch.lastEnd = Math.min(pdfDisplayed.numPages, s + n);
    return { s, n };
}
window.highlightPDFText = function(query, n = 0) {
    var tlEls = document.getElementById('text-layer').querySelectorAll('span');
    if (tlEls.length === 0) {
        if (n < 3)
            setTimeout(function () { highlightPDFText(query, n + 1); }, 200);
        return;
    }
    let spl = query.toLowerCase().split(" ");
    for (var i = 0; i < spl.length; i++) {
        for (var t = 0; t < tlEls.length; t++) {
            if (tlEls[t].innerHTML.toLowerCase().indexOf(spl[i]) !== -1) {
                var regEx = new RegExp(escapeRegExp(spl[i]), "ig");
                tlEls[t].innerHTML = tlEls[t].innerHTML.replace(regEx, "<span class='tl-highlight'>$&</span>");
            }
        }
    }
    document.getElementById("siac-pdf-top").scrollTop = Math.max(0, $('#text-layer .tl-highlight').first()[0].parentElement.offsetTop - 50);
}




/***/ }),
/* 1 */
/***/ (function(module, exports) {

/**
 * ###########################################
 *  PDF image cut-out / Page Snapshot
 * ###########################################
 */

window.pdfImgSel = {
    canvas: null,
    context: null,
    startX: null,
    endX: null,
    startY: null,
    endY: null,
    cvsOffLeft: null,
    cvsOffTop: null,
    mouseIsDown: false,
    canvasDispl: null
};

window.pdfImgMouseUp = function pdfImgMouseUp(event) {
    if (pdfImgSel.mouseIsDown) {
        pdfImgSel.mouseIsDown = false;
        drawSquare();
        var pdfC = document.getElementById("siac-pdf-canvas");
        cropSelection(pdfC, pdfImgSel.startX, pdfImgSel.startY, pdfImgSel.endX - pdfImgSel.startX, pdfImgSel.endY - pdfImgSel.startY, insertImage);
        $(pdfImgSel.canvas).remove();
        $('#text-layer').show();
    }
}
/** Save whole page to image */
window.pageSnapshot = function() {
    var pdfC = document.getElementById("siac-pdf-canvas");
    cropSelection(pdfC, 0, 0, pdfC.offsetWidth, pdfC.offsetHeight, insertImage);
}
window.cropSelection = function(canvasSrc, offsetX, offsetY, width, height, callback) {
    let temp = document.createElement('canvas');
    let tctx = temp.getContext('2d');
    temp.width = width;
    temp.height = height;
    tctx.drawImage(canvasSrc, offsetX * window.devicePixelRatio, offsetY * window.devicePixelRatio, width * window.devicePixelRatio, height * window.devicePixelRatio, 0, 0, temp.width, temp.height);
    callback(temp.toDataURL());
}
window.insertImage = function(data) {
    pycmd("siac-add-image 1 " + data.replace("image/png", ""));
}
window.pdfImgMouseDown = function(event) {
    pdfImgSel.canvasDispl = document.getElementById("siac-pdf-canvas").offsetLeft;
    pdfImgSel.mouseIsDown = true;
    pdfImgSel.cvsOffLeft = $(pdfImgSel.canvas).offset().left;
    pdfImgSel.cvsOffTop = $(pdfImgSel.canvas).offset().top;
    pdfImgSel.startX = pdfImgSel.endX = event.clientX - pdfImgSel.cvsOffLeft;
    pdfImgSel.startY = pdfImgSel.endY = event.clientY - pdfImgSel.cvsOffTop;
    drawSquare();
}
window.initImageSelection = function() {
    if ($('#text-layer').is(":hidden")) {
        $(pdfImgSel.canvas).remove();
        $('#text-layer').show();
        return;
    }
    $('#text-layer').hide();
    pdfImgSel.canvas = document.getElementById("siac-pdf-canvas");
    var lCanvasOverlay = document.createElement("canvas");
    pdfImgSel.canvas.parentNode.insertBefore(lCanvasOverlay, pdfImgSel.canvas.nextSibling);
    $(lCanvasOverlay).css({ "width": (pdfImgSel.canvas.width / window.devicePixelRatio) + "px", "height": (pdfImgSel.canvas.height / window.devicePixelRatio) + "px", "top": "0", "left": document.getElementById('text-layer').style.left, "position": "absolute", "z-index": 999999, "opacity": 0.3, "cursor": "crosshair" });
    lCanvasOverlay.setAttribute('width', pdfImgSel.canvas.width);
    lCanvasOverlay.setAttribute('height', pdfImgSel.canvas.height);
    pdfImgSel.context = lCanvasOverlay.getContext("2d");
    lCanvasOverlay.addEventListener("mousedown", function (e) { pdfImgMouseDown(e); }, false);
    lCanvasOverlay.addEventListener("mouseup", function (e) { pdfImgMouseUp(e); }, false);
    lCanvasOverlay.addEventListener("mousemove", function (e) { pdfImgMouseXY(e); }, false);
    pdfImgSel.canvas = lCanvasOverlay;
}
window.pdfImgMouseXY = function(event) {
    if (pdfImgSel.mouseIsDown) {
        pdfImgSel.endX = event.clientX - pdfImgSel.cvsOffLeft;
        pdfImgSel.endY = event.clientY - pdfImgSel.cvsOffTop;
        drawSquare();
    }
}
window.drawSquare = function() {
    pdfImgSel.context.clearRect(0, 0, pdfImgSel.context.canvas.width, pdfImgSel.context.canvas.height);
    pdfImgSel.context.fillRect(pdfImgSel.startX * window.devicePixelRatio, pdfImgSel.startY * window.devicePixelRatio, Math.abs(pdfImgSel.startX - pdfImgSel.endX) * window.devicePixelRatio, Math.abs(pdfImgSel.startY - pdfImgSel.endY) * window.devicePixelRatio);
    pdfImgSel.context.fillStyle = "yellow";
    pdfImgSel.context.fill();
}

/***/ }),
/* 2 */
/***/ (function(module, exports) {

/** Experimental function to improve copy+paste from the text layer. */
window.onPDFCopy = function(e) {
    sel = getSelection();
    let r = sel.getRangeAt(0);
    let nodes = nodesInSelection(r);
    if (!nodes) { return; }
    let text = "";
    let offsetLeftLast = 0;
    let offsetTopLast = 0;
    let widthLast = 0;
    let insertedCount = 0;
    let lastYDiffs = [];
    let lastFontSize = null;
    for (let i = 0; i < nodes.length; i++) {


        // check for new line
        if ((nodes[i].offsetLeft < offsetLeftLast || nodes[i].offsetTop > offsetTopLast + 5) && !nodes[i].innerText.startsWith(" ")) {
            // check for last font size, if difference is large, insert newlines
            if (lastFontSize && Math.abs(Number(nodes[i].style.fontSize.substring(0, nodes[i].style.fontSize.indexOf("px"))) - lastFontSize) > 4) {
                text += "\n\n" + nodes[i].innerText;
                insertedCount += 2;
            }

            // check for line with larger vertical distance to the previous lines 
            else if (lastYDiffs.length > 0 && (nodes[i].offsetTop - offsetTopLast) > lastYDiffs.slice(-1)[0] + 2) {
                text += "\n\n" + nodes[i].innerText;
                insertedCount += 2;
            }
            // if last word in previous line was hyphenated, join them
            else if (text.endsWith("-")) {
                text = text.substring(0, text.length - 1) + nodes[i].innerText;
                insertedCount--;
                // else insert a whitespace
            } else {
                text += " " + nodes[i].innerText;
                insertedCount++;
            }
            if (offsetTopLast !== 0) {
                lastYDiffs.push(nodes[i].offsetTop - offsetTopLast);
            }
            lastFontSize = Number(nodes[i].style.fontSize.substring(0, nodes[i].style.fontSize.indexOf("px")));

            // check for space between text divs, if there is enough space, we should probably insert a whitespace
        } else if (offsetLeftLast + widthLast < nodes[i].offsetLeft - 2 && !nodes[i].innerText.startsWith(" ")) {
            text += " " + nodes[i].innerText;
            insertedCount++;
        }
        else {
            text += nodes[i].innerText;
        }

        offsetLeftLast = nodes[i].offsetLeft;
        offsetTopLast = nodes[i].offsetTop;
        widthLast = nodes[i].offsetWidth;
    }
    let original = sel.toString();
    if (!text.length && original.length) {
        text = original;
    }
    text = text.replace("  ", " ");
    if (!original.startsWith(text.substring(0, Math.min(10, text.length)))) {
        for (var y = 10; y > 0; y--) {
            if (text.indexOf(original.substring(0, Math.min(y, original.length))) > 0) {
                text = text.substring(text.indexOf(original.substring(0, Math.min(y, original.length))));
                break;
            }
        }
    }
    if (text.length > original.length + insertedCount) {
        for (var ce = 10; ce > 0; ce--) {
            let lastOrig = original.substring(original.length - (Math.min(original.length, ce)));
            if (text.lastIndexOf(lastOrig) >= 0) {
                text = text.substring(0, text.lastIndexOf(lastOrig) + lastOrig.length);
                break;
            }
        }
    }

    text = text.replace(/( |&nbsp;){2,}/g, " ");
    text = text.replace(/ ([,.;:]) /g, "$1 ");
    text = text.replace(/ ([)\].!?:])/g, "$1");
    text = text.replace(/([(\[]) /g, "$1");
    e.clipboardData.setData('text/plain', text);
    e.preventDefault();
}

window.pdfLeftTabPdfSearchKeyup = function(value, event) {
    if (event.keyCode !== 13) {
        return;
    }
    if (value && value.trim().length > 0) {
        pycmd("siac-pdf-left-tab-pdf-search " + value);
    }
}

window.pdfLeftTabAnkiSearchKeyup = function(value, event) {
    if (event.keyCode !== 13) {
        return;
    }
    if (value && value.trim().length > 0) {
        pycmd("siac-pdf-left-tab-anki-search " + value);
    }
}

window.pdfViewerKeyup = function(event) {
    if (event.ctrlKey && (event.keyCode === 39 || (event.keyCode === 32 && event.shiftKey))) {
        if (event.shiftKey && pdfDisplayed && pagesRead.indexOf(pdfDisplayedCurrentPage) === -1 && (!pdfExtract || (pdfExtract[0] <= pdfDisplayedCurrentPage && pdfExtract[1] >= pdfDisplayedCurrentPage))) {
            pycmd("siac-pdf-page-read " + $('#siac-pdf-top').data("pdfid") + " " + pdfDisplayedCurrentPage + " " + numPagesExtract());
            if (pagesRead.length) { pagesRead.push(pdfDisplayedCurrentPage); } else { pagesRead = [pdfDisplayedCurrentPage]; }
            updatePdfProgressBar();
        }
        pdfPageRight();
    } else if (event.ctrlKey && event.keyCode === 74) {
        pdfPageRight();
    } else if (event.ctrlKey && (event.keyCode === 37 || event.keyCode === 75)) {
        pdfPageLeft();
    }
}
window.pdfTooltipClozeKeyup = function(event) {
    try {
        if (event.ctrlKey && event.shiftKey && event.keyCode === 67) {
            let text = window.getSelection().toString();
            if (!text || text.length === 0) {
                return;
            }
            let c_text = document.getElementById("siac-pdf-tooltip-results-area").innerHTML;
            for (var i = 1; i < 20; i++) {
                if (c_text.indexOf("{{c" + i + "::") === -1) {
                    c_text = c_text.split(text).join("<span style='color: lightblue;'>{{c" + i + "::" + text + "}}</span>");
                    document.getElementById("siac-pdf-tooltip-results-area").innerHTML = c_text;
                    break;
                }
            }
        }
    } catch (ex) {
        pycmd("siac-notification Something went wrong during clozing:<br> " + ex.message);
    }
}

window.markClicked = function(event) {
    if (event.target.className === "siac-page-mark-link") {
        pdfDisplayedCurrentPage = Number(event.target.innerHTML);
        queueRenderPage(pdfDisplayedCurrentPage, true);
    }
}

// clicked on the text layer, should
// 1. hide the tooltip if present
// 2. trigger the click on a highlight if it is below the textlayer at the given coords
window.textlayerClicked = function(event, el) {
    if (!event.ctrlKey && !windowHasSelection()) {
        $("#siac-pdf-tooltip").hide();
        if (el.style.pointerEvents !== "none") {
            el.style.pointerEvents = "none";
            let e = $.Event("click");
            e.ctrlKey = true;
            $(document.elementFromPoint(event.clientX, event.clientY)).trigger(e);
            el.style.pointerEvents = "auto";
        }
    }
}

/**
 * Right click on a queue item in the bottom bar of the reading modal. 
 */
window.queueLinkContextMenu = function(event, nid) {
    event.preventDefault();
    document.body.style.overflowY = "hidden";
    $(document.body).append(`
        <div onmouseleave='$(this).remove();' style='position: absolute; z-index: 1000; left: ${event.pageX}px; top: ${event.pageY - 30}px; width: 100px; height: 20px; text-align: center;' class='siac-pdf-contextmenu'> 
            <div>    
                <a class='siac-clickable-anchor' style='color: lightgrey;' onclick='pycmd("siac-eval index.ui.reading_modal.show_remove_dialog(${nid})")'>Remove / Delete</a>
            </div>
        </div>
    `);
    return false;
}

/**
 *  executed after keyup in the pdf pane
 */
window.pdfKeyup = function(e) {
    // selected text, no ctrl key -> show tooltip if enabled 
    if (!e.ctrlKey && !e.metaKey && pdfTooltipEnabled && windowHasSelection()) {
        $('#text-layer .tl-highlight').remove();
        let s = window.getSelection();
        let r = s.getRangeAt(0);
        let text = s.toString();
        if (text === " " || text.length > 500) { return; }
        // spans in textlayer have a max height to prevent selection jumping, but here we have to temporarily 
        // disable it, to get the actual bounding client rect
        $('#text-layer > span').css("height", "auto");
        let nodesInSel = nodesInSelection(r);
        let sentences = getSentencesAroundSelection(r, nodesInSel, text);
        if (nodesInSel.length > 1) {
            text = joinTextLayerNodeTexts(nodesInSel, text);
        }
        let rect = r.getBoundingClientRect();
        let prect = document.getElementById("siac-reading-modal").getBoundingClientRect();
        document.getElementById('siac-pdf-tooltip-results-area').innerHTML = 'Searching...';
        document.getElementById('siac-pdf-tooltip-searchbar').value = "";
        let left = rect.left - prect.left;
        if (prect.width - left < 250) {
            left -= 200;
        }
        $('#siac-pdf-tooltip').css({ 'top': (rect.top - prect.top + rect.height) + "px", 'left': left + "px" }).show();
        pycmd("siac-pdf-selection " + text);
        $('#siac-pdf-tooltip').data("sentences", sentences);
        $('#siac-pdf-tooltip').data("selection", text);
        // limit height again to prevent selection jumping
        $('#text-layer > span').css("height", "200px");
    } else if ((e.ctrlKey || e.metaKey) && Highlighting.colorSelected.id > 0 && windowHasSelection()) {
        // selected text, ctrl key pressed -> highlight 
        Highlighting.highlight();
        pdfTextLayerMetaKey = false;
    } else if ((e.ctrlKey || e.metaKey) && Highlighting.colorSelected.id === 0 && !windowHasSelection()) {
        // clicked with ctrl, text insert btn is active -> insert text area at coordinates
        Highlighting.insertText(e);
    }
}

window.pdfMouseWheel = function(event) {
    if (!event.ctrlKey && !event.metaKey) { return; }
    if (event.deltaY < 0) {
        pdfScaleChange("up");
    }
    else if (event.deltaY > 0) {
        pdfScaleChange("down");
    }
    event.preventDefault();
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(6);


/***/ }),
/* 4 */
/***/ (function(module, exports) {

// anki-search-inside-add-card
// Copyright (C) 2019 - 2020 Tom Z.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

window.siacState = {
    selectedDecks : ["-1"],
    timeout : null,
    isFrozen : false,
    searchOnSelection : true,
    searchOnTyping : true,
    keepPositionAtRendering: false
};

window.lastHadResults = false;
window.loadingTimer = null;
window.calTimer = null;
window.gridView = false;
window.tagHoverCB = null;
window.tagHoverTimeout = 750;
window.searchMaskTimer = null;
window.$fields = null;


window.sendContent = function(event) {
    if ((event && event.repeat) || pdfDisplayed != null || siacState.isFrozen)
        return;
    if (!$fields.text())
        return;
    let html = "";
    showLoading("Typing");
    $fields.each(function(index, elem) {
        html += elem.innerHTML + "\u001f";
    });
    pycmd('siac-r-fld ' + siacState.selectedDecks.toString() + ' ~ ' + html);
}
window.searchCurrentField = function() {
    if (displayedNoteId || siacState.isFrozen) {return;}
    let f = $('.field:focus').first();
    if (!f.length) {return;}
    let t = f.text();
    if (!t || t.trim().length === 0) {return;}
    showLoading("Typing");
    pycmd('siac-r-fld ' + siacState.selectedDecks.toString() + ' ~ ' + t);

}
window.sendSearchFieldContent = function() {
    showLoading("Searchbar");
    html = document.getElementById('siac-browser-search-inp').value + "\u001f";
    pycmd('siac-r-srch-db ' + siacState.selectedDecks.toString() + ' ~ ' + html);
}


window.searchFor = function(text) {
    showLoading("Note Search");
    text += "\u001f";
    pycmd('siac-r-fld ' + siacState.selectedDecks.toString() + ' ~ ' + text);
}
window.updateSelectedDecks = function(elem) {
    siacState.selectedDecks = [];
    let str = "";
    if (elem)
        $(elem).toggleClass("selected");
    $(".deck-list-item.selected").each(function () {
        if ($(this).data('id')) {
            siacState.selectedDecks.push($(this).data('id'));
            str += " " + $(this).data('id');
        }
    });
    pycmd("deckSelection" + str);
}
window.selectAllDecks = function() {
    $('.deck-list-item').addClass('selected');
    updateSelectedDecks();
}
window.unselectAllDecks = function() {
    $('.deck-list-item').removeClass('selected');
    updateSelectedDecks();
}
window.selectDeckWithId = function(did) {
    $('.deck-list-item').removeClass('selected');
    $(".deck-list-item").each(function () {
        if ($(this).data('id') == did) {
            $(this).addClass("selected");
        }
    });
    updateSelectedDecks();
}
window.selectDeckAndSubdecksWithId = function(did) {
    $('.deck-list-item').removeClass('selected');
    $(`.deck-list-item[data-id=${did}]`).addClass("selected");
    $(`.deck-list-item[data-id=${did}] .deck-list-item`).addClass("selected");
    updateSelectedDecks();
}
window.fixRetMarkWidth = function(elem) {
    if (elem && elem.parentElement.getElementsByClassName("retMark").length > 0 && elem.parentElement.getElementsByClassName("retMark")[0].style.maxWidth.length == 0)
        elem.parentElement.getElementsByClassName("retMark")[0].style.maxWidth = elem.offsetWidth + "px";
}
window.expandRankingLbl = function(elem) {
    fixRetMarkWidth(elem);
    if (elem.getElementsByClassName("rankingLblAddInfo")[0].offsetParent === null) {
        elem.getElementsByClassName("rankingLblAddInfo")[0].style.display = "inline";
        elem.getElementsByClassName("editedStamp")[0].style.display = "none";
        if (elem.parentElement.getElementsByClassName("siac-susp-lbl").length !== 0) {
            elem.parentElement.getElementsByClassName("siac-susp-lbl")[0].style.display = "none";
        }
    } else {
        elem.getElementsByClassName("rankingLblAddInfo")[0].style.display = "none";
        elem.getElementsByClassName("editedStamp")[0].style.display = "inline";
        if (elem.parentElement.getElementsByClassName("siac-susp-lbl").length !== 0) {
            elem.parentElement.getElementsByClassName("siac-susp-lbl")[0].style.display = "block";
        }
    }
}
window.expandCard = function(id, icn) {
    pycmd("siac-note-stats " + id);
}
window.pinMouseLeave = function(elem) {
    $(elem).css('opacity', '0');
}
window.pinMouseEnter = function(elem) {
    $(elem).css('opacity', '1');
}
window.cardMouseEnter = function(elem, nid, mode = "full") {
    if (mode == "full") {
        $(`#btnBar-${nid}`).css('opacity', '1');
    } else {
        $(`#btnBarSmp-${nid}`).css('opacity', '1');
    }
}
window.showLoading = function(source) {
    loadingTimer = setTimeout(function () {
        document.getElementById('searchInfo').innerHTML = `<table><tr><td>Status</td><td><b>Searching</b></td></tr><tr><td>Source</td><td><i>${source}</i></td></tr></table>`;
    }, 1000);
}
window.totalOffset = function(elem) {
    var top = 0, left = 0;
    do {
        top += elem.offsetTop || 0;
        left += elem.offsetLeft || 0;
        elem = elem.offsetParent;
    } while (elem);

    return {
        top: top,
        left: left
    };
}
window.cardMouseLeave = function(elem, nid, mode = "full") {
    setTimeout(function () {
        if (mode == "full") {
            if (!$('#btnBar-' + nid).is(':hover')) {
                $('#btnBar-' + nid).css('opacity', '0');
            }
        } else {
            if (!$('#btnBarSmp-' + nid).is(':hover')) {
                $('#btnBarSmp-' + nid).css('opacity', '0');
            }
        }
    }, 100);
}
window.tagMouseEnter = function(elem) {
    if (!showTagInfoOnHover || !elem || !elem.parentElement)
        return;
    tagHoverCB = setTimeout(function () {
            if (elem && elem.parentElement && elem.parentElement.querySelector(':hover') === elem && !document.getElementById('siac-tag-info-box-' + $(elem).data('stamp'))) {
                pycmd("siac-tag-info " + $(elem).data("stamp") + " " + $(elem).data("name"));
            }
    }, tagHoverTimeout);
}
window.showTagInfo = function(elem) {
    let stamp = $(elem).data("stamp");
    $(elem).css("z-index", "9999");
    if (elem) {
        $("#greyout").show();
    }
    let offset = totalOffset(elem);
    offset.top += 17;
    let existing = document.getElementsByClassName("siac-tag-info-box");
        if (elem.parentElement.id && elem.parentElement.id ===  "tagContainer") {
            offset.top -= document.getElementById("tagContainer").scrollTop;
        } else if (existing.length > 1) {
            if (elem.parentElement.parentElement.parentElement.className.indexOf("siac-tag-info-box-left") >= 0) {
                offset.top -= elem.parentElement.parentElement.parentElement.scrollTop;
            }
        } else if (document.getElementById('cal-info').offsetParent !== null) {
            offset.top -= document.getElementById("cal-info-notes").scrollTop;
        } else {
            offset.top -= document.getElementById("searchResults").scrollTop;
        }
    let id = 'siac-tag-info-box-' + stamp;

    if (offset.left > window.outerWidth - offset.left) {
        offset.left -= $('#siac-tag-info-box-' + stamp).outerWidth();
        offset.left += $(elem).outerWidth() + 2;
    }
    let highestZ = 0;
    for (var i = 0; i < existing.length; i++)  {
        if (Number($(existing[i]).css("z-index")) > highestZ)
            highestZ = Number($(existing[i]).css("z-index"));
    }

    $('#siac-tag-info-box-' + stamp).css("top", offset.top).css("left", offset.left).css("z-index", highestZ + 1);
    if (offset.top > window.outerHeight - offset.top) {
        document.getElementById(id).style.visibility = "hidden";
        document.getElementById(id).style.display = "block";
        let diff = 17;
        if (existing.length > 1)
            diff = 15;
        $('#' + id).css('top', offset.top - $('#' + id).outerHeight() - diff);
        document.getElementById(id).style.visibility = "visible";
    } else {
        document.getElementById(id).style.display = "block";
    }
}

window.tagMouseLeave = function(elem) {
    let stamp = $(elem).data('stamp');
    if ($('#siac-tag-info-box-' + stamp + ":hover").length || $(`.tagLbl[data-stamp='${stamp}']:hover`).length) {
        return;
    }
    let existing = document.getElementsByClassName("siac-tag-info-box");
    let elems_z = Number($(elem).css("z-index"));
    let hovered = $(".siac-tag-info-box:hover").first();
    if (!hovered.length && !$(`.tagLbl[data-stamp]:hover`).length) {
        $('.siac-tag-info-box').remove();
        $('.tagLbl').css("z-index", "4");
        $("#greyout").hide();
        return;
    }
    if (hovered.length){
        let hovered_z = Number(hovered.css("z-index"));
        if (elem.id && hovered_z > elems_z)
            return;

        for(var i = 0; i < existing.length; i++) {
            if (Number($(existing[i]).css("z-index")) > hovered_z) {
                $(existing[i]).remove();
                i--;
            }
        }
    }
    $(`.tagLbl[data-stamp='${stamp}']`).first().css("z-index", "4");
    if (document.getElementById("siac-tag-info-box-"+ stamp))
        $('#siac-tag-info-box-' + stamp).remove();
    if (!existing || existing.length < 1) {
         $("#greyout").hide();
    }

}
window.tagInfoBoxClicked = function(elem) {
    let elems_z_index = Number($(elem).css("z-index"));
    let otherBoxes = document.getElementsByClassName("siac-tag-info-box");
    for (var i = 0; i < otherBoxes.length; i++) {
        if (Number($(otherBoxes[i]).css("z-index")) < elems_z_index) {
            $(otherBoxes[i]).remove();
            i--;
        }
    }
}
window.appendToField = function(fldIx, html) {
    if ($(`.field:eq(${fldIx})`).text().length) { 
        $(`.field:eq(${fldIx})`).append('<br/>' + html);
    } else {
        $(`.field:eq(${fldIx})`).html(html);
    }
    pycmd(`blur:${fldIx}:${currentNoteId}:${$(`.field:eq(${fldIx})`).html()}`);
}
window.getSelectionText = function() {
    if (!siacState.searchOnSelection || siacState.isFrozen)
        return;
    var text = "";
    if (window.getSelection) {
        text = window.getSelection().toString();
    } else if (document.selection && document.selection.type != "Control") {
        text = document.selection.createRange().text;
    }
    if (text.trim().length > 0 && text != "&nbsp;") {
        showLoading("Selection");
        pycmd('siac-r-fld-selected ' + siacState.selectedDecks.toString() + ' ~ ' + text);
    }
}
window.searchForUserNote = function(event, elem) {
    if (!elem || elem.value.length === 0 || !elem.value.trim()) {
       return;
    }
    if (event.keyCode == 13) {
        if (elem.id){
            elem.parentElement.parentElement.style.display = 'none';
        }
        pycmd('siac-r-user-note-search-inp ' + elem.value);
    } else if (elem.id && (event.key === "Escape" || event.key === "Esc")) {
        elem.parentElement.style.display = 'none';
    } else {
        clearTimeout(searchMaskTimer);
        searchMaskTimer = setTimeout(function() {
            pycmd('siac-r-user-note-search-inp ' + elem.value);
        }, 800);
    }
}
window.searchUserNoteTag = function(e, tag) {
    if (e.ctrlKey || e.metaKey) {
        pycmd('siac-create-note-tag-prefill ' + tag);
    } else {
        pycmd('siac-r-user-note-search-tag ' + tag);
    }
}
window.switchLeftRight = function() {
    let flds = document.getElementById("leftSide");
    let addon = document.getElementById("siac-right-side");
    if (flds.parentNode.children[0].id === "leftSide") {
        flds.parentNode.insertBefore(addon, flds);
        $(document.body).addClass("siac-left-right-switched");
        pycmd("siac-switch-left-right true");
    }
    else {
        flds.parentNode.insertBefore(flds, addon);
        $(document.body).removeClass("siac-left-right-switched");
        pycmd("siac-switch-left-right false");
    }
}

window.onWindowResize = function(fitPdfToPage = true) {
   
    let offsetTop = document.getElementById("topbutsOuter").offsetHeight + 3;
    document.getElementById("outerWr").style.marginTop = offsetTop + "px";
    document.getElementById("outerWr").style.height = `calc(100vh - ${offsetTop}px)`;

    if (!$('#switchBtn').is(":visible")) {
        $('#leftSide').css("display", "flex");
        $('#outerWr').css('display', 'flex').removeClass('onesided');
        document.getElementById('switchBtn').innerHTML = "&#10149; Search";
    }
    if (fitPdfToPage && typeof pdfDisplayed !== "undefined" && pdfDisplayed) {
        if(this.resizeTimeout) clearTimeout(this.resizeTimeout);
            this.resizeTimeout = setTimeout(function() {
                if (pdfDisplayed) {
                    pdfFitToPage();
                }
            }, 300);
    }
}
window.setHighlighting = function(elem) {
    let highlight = $(elem).is(":checked") ? "on" : "off";
    pycmd("highlight " + highlight);
}
window.setTagSearch = function(elem) {
    let tagSearch = $(elem).is(":checked") ? "on" : "off";
    pycmd("tagSearch " + tagSearch);
}

window.tagClick = function(elem) {
    if ($(elem).data('tags') && $(elem).data('tags') == $(elem).data('name')) {
        $('#a-modal').show();
        pycmd('siac-render-tags ' + $(elem).data('tags'));
        return;
    }
    let name = $(elem).data('target') || $(elem).data('name');
    $(".siac-tag-info-box").remove();
    $("#greyout").hide();
    pycmd('siac-tag-clicked ' + name);
}
window.noteSidebarExpandAll = function() {
    $('#siac-notes-sidebar .exp').each(function(ix, elem) {
        let icn = $(elem);
        if (icn.text().length) {
            if (icn.text() === '[+]') {
                icn.text('[-]');
                icn.parent().parent().children('ul').toggle();
            }
        }
    });
}
window.noteSidebarCollapseAll = function() {
    $('#siac-notes-sidebar .exp').each(function(ix, elem) {
        let icn = $(elem);
        if (icn.text().length) {
            if (icn.text() === '[-]') {
                icn.text('[+]');
                icn.parent().parent().children('ul').toggle();
            }
        }
    });
}
window.deleteNote = function(id) {
    document.getElementById('siac-del-modal').innerHTML = '<center style="margin: 20px 0 20px 0;">Deleting...</center>';
    setTimeout(function() {
        pycmd("siac-delete-user-note " + id);
    }, 80);
}

window.synInputKeyup = function(event, elem) {
    if (event.keyCode == 13 && elem.value)
        pycmd("siac-save-synonyms " + elem.value);
}

window.synonymSetKeydown = function(event, elem, index) {
    if (event.keyCode == 13 && elem.innerHTML.length) {
        pycmd("siac-edit-synonyms " + index + " " + elem.innerHTML);
        event.preventDefault();
        $(elem).blur();
    }
}
window.searchSynset = function(elem) {
    let set = elem.parentElement.parentElement.children[0].children[0].innerHTML;
    if (set) {
        pycmd("siac-r-synset-search " + set);
    }
}
window.updateFieldToExclude = function(checkbox, mid, fldOrd) {
    if ($(checkbox).is(':checked')) {
        pycmd("siac-update-field-to-exclude " + mid + " " + fldOrd + " false");
    } else {
        pycmd("siac-update-field-to-exclude " + mid + " " + fldOrd + " true");
    }
}
window.updateFieldToHideInResult = function(checkbox, mid, fldOrd) {
    if ($(checkbox).is(':checked')) {
        pycmd("siac-update-field-to-hide-in-results " + mid + " " + fldOrd + " false");
    } else {
        pycmd("siac-update-field-to-hide-in-results " + mid + " " + fldOrd + " true");
    }
}
window.setSearchOnTyping = function(active, trigger=true) {
    siacState.searchOnTyping = active;
    if (!active)
        $('.field').off('keyup.siac', fieldKeypress);
    else {
        $('.field').on('keyup.siac', fieldKeypress);
        if (trigger) {
            sendContent();
        }
    }
    sendSearchOnTyping();
}
window.sendSearchOnTyping = function() {
    pycmd("searchWhileTyping " + (siacState.searchOnTyping ? "on" : "off"));
}
window.sendSearchOnSelection = function() {
    pycmd("searchOnSelection " + (siacState.searchOnSelection ? "on" : "off"));
}
window.fieldKeypress = function(event) {
    if (event.keyCode != 13 && event.keyCode != 9 && event.keyCode != 91 && !(event.keyCode >= 37 && event.keyCode <= 40) && !event.ctrlKey &&!event.altKey) {
        if (siacState.timeout) {
            clearTimeout(siacState.timeout);
            siacState.timeout = null;
        }
        siacState.timeout = setTimeout(function () {
            sendContent(event);
        }, delayWhileTyping);
    }
}
window.searchMaskKeypress = function(event) {
    if (event.keyCode === 13)
        sendSearchFieldContent();
}
window.pinCard = function(elem, nid) {
    $('#cW-' + nid).css('padding', '3px 4px 5px 5px');
    $('#cW-' + nid).css('font-size', '9px');
    let info = document.getElementById('cW-' + nid).getElementsByClassName("rankingLblAddInfo")[0];
    let editedStamp = document.getElementById('cW-' + nid).getElementsByClassName("editedStamp")[0];
    $('#cW-' + nid).html('<span>&#128204;</span>');
    document.getElementById('cW-' + nid).appendChild(info);
    document.getElementById('cW-' + nid).appendChild(editedStamp);
    $('#' + nid).parents().first().addClass('pinned');
    updatePinned();
}
window.searchCard = function(elem) {
    let html = $(elem).parent().next().html();
    showLoading("Note Search");
    pycmd('siac-r-fld ' + siacState.selectedDecks.toString() + ' ~ ' + html);
}
window.searchCardFromFloated = function(id) {
    let html = document.getElementById(id).innerHTML;
    showLoading("Note Search");
    pycmd('siac-r-fld ' + siacState.selectedDecks.toString() + ' ~ ' + html);
}
window.edit = function(nid) {
    pycmd('siac-edit-note ' + nid);
}
window.updatePinned = function() {
    let pincmd = 'siac-pin';
    $('.pinned').each(function (index) {
        pincmd += " " + $(this).children().first().children().first().attr('id').substring(3);
    });
    $('.noteFloating').each(function (index) {
        pincmd += " " + $(this).attr('id').substring(3);
    });
    pycmd(pincmd);
}
window.clearSearchResults = function() {
    let notes_old = document.querySelectorAll("#searchResults .cardWrapper:not(.pinned)");
    for (var i = 0; i < notes_old.length; i++) {
        notes_old[i].remove();
    }
    try {
        document.getElementById("startInfo").remove();
        document.getElementById("greyout").style.display = "none";
    } catch(e) {}

    $('.siac-tag-info-box,#siac-results-loader-wrapper').remove();
    $('.tagLbl').css("z-index", "999");
}

window.setSearchResults = function(html, infoStr, infoMap, page = 1, pageMax = 1, total = 50, cacheSize = -1, stamp = -1, printTiming = false, isRerender= false) {
    let rStart = new Date().getTime();
    clearSearchResults();
    var sr = document.getElementById("searchResults");
    sr.style.overflowY = 'hidden';
    sr.style.paddingRight = '24px';
    sr.innerHTML += html;
    if (!isRerender && !siacState.keepPositionAtRendering && html.length > 0) {
        sr.scrollTop = 0;
    } else if (siacState.keepPositionAtRendering) {
        siacState.keepPositionAtRendering = false;
    }
    let c = 1;
    clearTimeout(loadingTimer);
    if (infoMap && lastHadResults && document.getElementById("info-Took")) {
        document.getElementById("info-Took").innerHTML = infoMap["Took"];
        document.getElementById("info-Found").innerHTML = infoMap["Found"];
        document.getElementById("tagContainer").innerHTML = infoMap["Tags"];
        document.getElementById("keywordContainer").innerHTML = infoMap["Keywords"];
    } else {
        document.getElementById('searchInfo').innerHTML = infoStr;
    }
  
    if (infoMap)
        lastHadResults = true;
    else
        lastHadResults = false;
    if (renderImmediately) {
        if (gridView)
            $('#searchResults .cardWrapper').css("display", "inline-block");
        else
            $('#searchResults .cardWrapper').show();
        sr.style.overflowY = 'auto';
        sr.style.paddingRight = '10px';
        document.getElementById("greyout").style.display = "none";
        displayPagination(page, pageMax, total, html.length > 0, cacheSize);

        if (stamp > -1 && document.getElementById("info-took")) {
            if (printTiming) {
                let took = new Date().getTime() - stamp;
                document.getElementById("info-Took").innerHTML = `<b>${took}</b> ms &nbsp;<b style='cursor: pointer' onclick='pycmd("siac-last-timing ${new Date().getTime() - rStart}")'>&#9432;</b>`;
            } else {
                document.getElementById("info-Took").innerHTML = `<b>${new Date().getTime() - stamp}</b> ms`;
            }
        }
    }
    else {
        time = gridView ? 100 : 130;
        count = gridView ? 16 : 10;
        if (stamp > -1 && document.getElementById("info-took")) {
            if (printTiming) {
                let took = new Date().getTime() - stamp;
                document.getElementById("info-Took").innerHTML = `<b>${took}</b> ms &nbsp;<b style='cursor: pointer' onclick='pycmd("siac-last-timing ${new Date().getTime() - rStart}")'>&#9432;</b>`;
            } else {
                document.getElementById("info-Took").innerHTML = `<b>${new Date().getTime() - stamp}</b> ms`;
            }
        }
        function renderLoop() {
            if (gridView)
                $("#nWr-" + (c + (50 * (page - 1)))).fadeIn().css("display", "inline-block");
            else
                $("#nWr-" + (c + (50 * (page - 1)))).fadeIn();
            setTimeout(function () {
                c++;
                if (c < count) {
                    renderLoop();
                } else {
                    if (gridView)
                        $('#searchResults .cardWrapper').css("display", "inline-block");
                    else
                        $('#searchResults .cardWrapper').show();
                    sr.style.overflowY = 'auto';
                    sr.style.paddingRight = '10px';
                    document.getElementById("greyout").style.display = "none";
                }
            }, time);
        }
        renderLoop();
        displayPagination(page, pageMax, total, html.length > 0, cacheSize);
    }
}
window.displayPagination = function(page, pageMax, total, resultsFound, cacheSize) {
    if (cacheSize !== -1) {
        let c_html = "";
        if (cacheSize > 1) {
            c_html += `<div onclick='pycmd("siac-rerender ${cacheSize - 2}")' style='display: inline; cursor: pointer;'>Last Results: &nbsp;</div>`;
            for (var i = 0; i < cacheSize - 1; i++) {
                c_html += `<span onclick='pycmd("siac-rerender ${cacheSize - i - 2}")'>${i+1}</span>`;
            }
        }
        document.getElementById("siac-cache-displ").innerHTML = c_html;
    }

    let html = "";
    if (pageMax === 0 || !resultsFound) { 
        document.getElementById("siac-pagination-status").innerHTML = "";
        document.getElementById("siac-pagination-wrapper").innerHTML = "";
        return; 
    }
    if (page === 1 && pageMax == 1) {
        html = "";
    } else {
            html += `<div class='siac-pg-icn' onclick='pycmd("siac-page 1")'>&#171;</div>`;
            html += `<div class='siac-pg-icn' onclick='pycmd("siac-page ${Math.max(page - 1, 1)}")'>&#8249;</div>`;
        let a = 0, b = 0;
        if (page + 5 > pageMax) {
            a = page + 5 - pageMax;
        }
        if (page - 5 <= 0) {
            b = Math.abs(page - 5) + 1;
        }
        for (var i = Math.max(page - 5 - a, 1); i <= page + 5 + b; i++) {
            if (i == page) {
                html += `<div class='siac-pg-icn siac-pg-icn-active' onclick='pycmd("siac-page ${i}")'>${i}</div>`;
            } else if (i <= pageMax){
                    html += `<div class='siac-pg-icn' onclick='pycmd("siac-page ${i}")'>${i}</div>`;
            }
        }
            html += `<div class='siac-pg-icn' onclick='pycmd("siac-page ${Math.min(page + 1, pageMax)}")'>&#8250;</div>`;
            html += `<div class='siac-pg-icn' onclick='pycmd("siac-page ${pageMax}")'>&#187;</div>`;

    }
    document.getElementById("siac-pagination-status").innerHTML = `Showing ${50 * (page - 1) + 1} - ${Math.min(total, 50 * page)} of ${total}`;
    document.getElementById("siac-pagination-wrapper").innerHTML = html;
}

window.sendClickedInformation = function(x, y) {
    let el = document.elementFromPoint(x, y);
    if (el.tagName == "IMG") {
        return "img " + el.src;
    }
    if ((el.tagName == "SPAN" || el.tagName == "DIV" || el.tagName == "MARK") && el.parentElement.className == "cardR") {
        return "note " + el.parentElement.id + " " + el.parentElement.innerHTML;
    }
    if (el.className == "cardR") {
        return "note " + el.id + " " + el.innerHTML;
    }
}
window.toggleTooltip = function(elem) {
    $(elem).children().first().toggle();
}
window.toggleFreeze = function(elem) {
    siacState.isFrozen = !siacState.isFrozen;
    if ($(elem).hasClass('frozen')) {
        $(elem).removeClass('frozen');
    } else {
        $(elem).addClass('frozen');
    }
}
window.hideTop = function() {
    // let height = $('#topContainer').outerHeight(true);
    // let formerHeight =  $("#resultsArea").outerHeight(true);
    $('#topContainer').hide();
    // $('#resultsArea').css('height', `${formerHeight + height}px`).css('border-top', '0px');
    $('#toggleTop').children().first().html('&#10097;');
    pycmd("toggleTop off");
}

window.toggleTop = function(elem) {
    // let height = $('#topContainer').outerHeight(true);
    $('#topContainer').toggle();
    // let formerHeight = $("#resultsArea").outerHeight(true);
    if ($('#topContainer').is(":hidden")) {
        // $('#resultsArea').css('height', `${formerHeight + height}px`).css('border-top', '0px');
        $(elem).children().first().html('&#10097;');
        pycmd("toggleTop off");
    } else {
        // height = $('#topContainer').outerHeight(true);
        // $('#resultsArea').css('height', `${formerHeight - height - 1}px`).css('border-top', '1px solid grey');
        $(elem).children().first().html('&#10096;');
        pycmd("toggleTop on");
    }
}
window.toggleGrid = function(elem) {

    if ($(elem).is(':checked')) {
        pycmd("toggleGrid on");
        gridView = true;
    } else {
        pycmd("toggleGrid off");
        gridView = false;
    }
}
window.activateGridView = function() {
    gridView = true;
    window.setTimeout(function() {
        $('#gridCb').prop("checked", true);
    }, 400);
}
/** Predefined searches, activated from the notes sidebar. */
window.predefSearchFromSidebar = function(type) {
    let decks = siacState.selectedDecks.toString();
    // show a loader for the longer-taking searches
    if (["lowestPerf", "highestPerf", "highestRet", "lowestRet"].indexOf(type) !== -1) {
        showSearchLoader();
        setTimeout(function() {
            pycmd('predefSearch ' + type + ' 200 ' + decks);
        }, 110);
    } else {
        pycmd('predefSearch ' + type + ' 200 ' + decks);
    }

}
/** Predefined searches, activated from the bottom row. */
window.predefSearch = function() {
    let e       = document.getElementById("predefSearchSelect");
    let search  = e.options[e.selectedIndex].value;
    let c       = document.getElementById("predefSearchNumberSel");
    let count   = c.options[c.selectedIndex].value;
    let decks   = siacState.selectedDecks.toString();
    // show a loader for the longer-taking searches
    if (["lowestPerf", "highestPerf", "highestRet", "lowestRet"].indexOf(search) !== -1) {
        showSearchLoader();
        setTimeout(function() {
            pycmd("predefSearch " + search + " " + count + " " + decks);
        }, 110);
    } else {
        pycmd("predefSearch " + search + " " + count + " " + decks);
    }
}
window.sort = function() {
    let e = document.getElementById("sortSelect");
    let sort = e.options[e.selectedIndex].value;
    pycmd("siac-p-sort " + sort);

}
window.toggleAddon = function() {
    try {
        if (document.getElementById('siac-reading-modal').style.display !== "none" && pdfFullscreen) {
            if ($(document.body).hasClass("siac-fullscreen-show-fields")) {
                $(document.body).removeClass("siac-fullscreen-show-fields").addClass("siac-fullscreen-show-right");
            } else {
                $(document.body).addClass("siac-fullscreen-show-fields").removeClass("siac-fullscreen-show-right");
            }
        }
        else {
            if ($('#outerWr').hasClass("onesided")) {
                showSearchPaneOnLeftSide();
                $('#siac-right-side').toggleClass("addon-hidden");
            } else if ($('#switchBtn').is(":visible")) {
                showSearchPaneOnLeftSide();
            } else {
                $('#siac-right-side').toggleClass("addon-hidden");
            }
            pycmd("toggleAll " + ($('#siac-right-side').hasClass("addon-hidden") ? "off" : "on"));
        }
        onWindowResize(false);
    } catch (e) {
        pycmd("siac-notification Failed to toggle: " + e.message);
    }
}
window.showSearchPaneOnLeftSide = function() {
    if ($('#outerWr').hasClass("onesided")) {
        $('#leftSide').show();
        document.getElementById('switchBtn').innerHTML = "&#10149; Search";
        $('#outerWr').css('display', 'flex').removeClass('onesided');
    } else {
        $('#leftSide').hide();
        $('#siac-right-side').removeClass("addon-hidden");
        document.getElementById('switchBtn').innerHTML = "&#10149; Back";
        $('#outerWr').css('display', 'block').addClass('onesided');
        onWindowResize();
    }
}
window.updateSwitchBtn = function(count) {
    if (!$('#outerWr').hasClass("onesided"))
        document.getElementById('switchBtn').innerHTML = `&#10149; Search (${count})`;
}
window.removeNote = function(nid) {
    $(document.getElementById("cW-" + nid).parentElement.parentElement).remove();
    updatePinned();
}
window.getOffset = function(el) {
    var _x = 0;
    var _y = 0;
    while (el && el.id !== "siac-right-side" && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
        _x += el.offsetLeft - el.scrollLeft;
        _y += el.offsetTop - el.scrollTop;
        el = el.offsetParent;
    }
    return { top: _y, left: _x };
}
window.calBlockMouseEnter = function(event, elem) {
    calTimer = setTimeout(function () {
        if ($('#cal-row').is(":hover") && event.ctrlKey) {
            displayCalInfo(elem);
            calTimer = null;
        }
    }, 100);
}
window.displayCalInfo = function(elem) {

    let offset = getOffset(elem.children[0]);

    let offsetLeft = offset.left - 153;
    let offsetRight = document.getElementById("siac-second-col-wrapper").clientWidth  - offset.left - 153;
    if (offsetLeft < 0) {
        offsetLeft -= (offset.left - 153);
        document.documentElement.style.setProperty('--tleft', (offset.left) + 'px')
    } else {
        document.documentElement.style.setProperty('--tleft', '50%');
    }
    if (offsetRight < 0) {
        document.documentElement.style.setProperty('--tleft', (-offsetRight + 153) + 'px')
        offsetLeft += offsetRight;
    }
    $('#cal-info').css("left", offsetLeft + "px").css("top", (offset.top - 275) + "px");
    document.getElementById('cal-info').style.display = "block";
    pycmd("siac-cal-info " + $(elem.children[0]).data("index"));
}

window.calMouseLeave = function() {
    calTimer = setTimeout(function () {
        if (!$('#cal-row').is(":hover") && !$('#cal-info').is(":hover"))
            document.getElementById('cal-info').style.display = "none";
        calTimer = null;
    }, 300);
}
window.fieldsBtnClicked = function() {
    if (siacState.isFrozen) {
        pycmd("siac-notification Results are frozen.");
        return;
    }
    if (!$fields.text()) {
        pycmd("siac-notification Fields are empty.");
        return;
    }
    let html = "";
    showLoading("Typing");
    $fields.each(function(index, elem) {
        html += elem.innerHTML + "\u001f";
    });
    pycmd('siac-r-fld ' + siacState.selectedDecks.toString() + ' ~ ' + html);
}

window.showModalSubpage = function(html) {
    $('#modalText').hide();
    $('#modal-subpage-inner').html(html);
    document.getElementById('modal-subpage').style.display = "flex";
}
window.hideModalSubpage = function() {
    $('#modal-subpage-inner').html('');
    $('#modal-subpage').hide();
    $('#modalText').show();
}

window.showLoader = function(target, text, voffset) {
    voffset = voffset ? voffset : 0;
    $('#' + target).append(`
    <div id='siac-loader-modal' class='siac-modal-small' contenteditable=false style='position-relative; text-align: center; margin-top: ${voffset}px;'>
        <div> <div class='signal' style='margin-left: auto; margin-right: auto;'></div><br/><div id='siac-loader-text'>${text}</div></div>
    </div>
    `);
}
window.showSearchLoader = function(text) {
    if (document.getElementById('siac-results-loader-wrapper')) {
        return;
    }
    text = text ? text : "Computing ...";
    let sr = document.getElementById("searchResults");
    sr.scrollTop = 0;
    sr.style.overflowY = 'hidden';
    sr.innerHTML += `
    <div id='siac-results-loader-wrapper' style='position: absolute; left: 0; right: 0; top: 0; bottom: 0; z-index: 5; height: 100%; text-align: center; background: rgba(0,0,0,0.4); display:flex; align-items: center; justify-content: center; border-radius: 5px;'>
        <div class='siac-search-loader' style='display: inline-block; vertical-align: middle;'>
            <b>${text}</b>
        </div>
    </div>`;
}

window.toggleSearchbarMode = function(elem) {
	if (elem.innerHTML === "Mode: Browser") {
	    elem.innerHTML = "Mode: Add-on";
	    pycmd("siac-searchbar-mode Add-on");
	} else {
	    elem.innerHTML = "Mode: Browser";
	    pycmd("siac-searchbar-mode Browser");
	}
}

window.globalKeydown = function(e) {
    if (displayedNoteId && e.keyCode === 122) {
        toggleReadingModalBars();
    }  else if (pdfDisplayed && !$('.field').is(':focus')) {
        pdfViewerKeyup(e);
    }
}

window.toggleNoteSidebar = function(){
    if (document.getElementById("siac-notes-sidebar")) {
        pycmd("siac-hide-note-sidebar");
    } else {
        pycmd("siac-show-note-sidebar");
    }
}

window.focusSearchShortcut = function() {
    if (displayedNoteId === null && document.getElementById("siac-browser-search-inp")) {
        document.getElementById("siac-browser-search-inp").focus();
    }
}
window.triggerSearchShortcut = function() {
    if (!displayedNoteId) {
        sendContent();
    }
}


/** ############# Floating notes */
window.addFloatingNote = function(nid) {
    let onedit = $('#' + nid.toString()).hasClass('siac-user-note') ? `pycmd("siac-edit-user-note ${nid}")`  : `edit(${nid})`;
    let content = document.getElementById(nid).innerHTML;
    content = content.replace(/<\/?mark>/g, "");
    $('#cW-' + nid).parent().parent().remove();
    let btnBar = `<div class='floatingBtnBar'>
        <div class="floatingBtnBarItem" onclick='${onedit}'>Edit</div>&nbsp;&#65372;
        <div class="floatingBtnBarItem" onclick='searchCardFromFloated("nFC-${nid}")'>Search</div>&nbsp;&#65372;
        <div class="floatingBtnBarItem" id='rem-${nid}' onclick='document.getElementById("nF-${nid}").outerHTML = ""; updatePinned();'><span>&#10006;&nbsp;&nbsp;</span></div>
    </div>`;
    let floatingNote = `<div id="nF-${nid}" class='noteFloating'>
            <div id="nFH-${nid}" class='noteFloatingHeader' onmousedown='dragElement(this.parentElement, "nFH-${nid}")'>&nbsp;${btnBar}</div>
            <div id="nFC-${nid}" class='noteFloatingContent'  onmouseup='getSelectionText()' >${content}</div>
                </div>
            `;
    if ($('.field').length > 8)
        $('.field').first().after(floatingNote);
    else
        $('.field').last().after(floatingNote);
    dragElement(document.getElementById("nF-" + nid), `nFH-${nid}`);
    updatePinned();
}
window.dragElement = function(elmnt, headerId, inModal=false) {
    var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0, lMYSum = 0, lMXSum = 0;
    if (document.getElementById(headerId)) {
        document.getElementById(headerId).onmousedown = dragMouseDown;
    } else {
        elmnt.onmousedown = dragMouseDown;
    }
    function dragMouseDown(e) {
        e = e || window.event;
        e.preventDefault();
        pos3 = e.clientX;
        pos4 = e.clientY;
        document.onmouseup = closeDragElement;
        document.onmousemove = elementDrag;
    }
    function elementDrag(e) {
        e = e || window.event;
        e.preventDefault();
        pos1 = pos3 - e.clientX;
        pos2 = pos4 - e.clientY;
        pos3 = e.clientX;
        pos4 = e.clientY;
        elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
        elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
    }
    function closeDragElement() {
        document.onmouseup = null;
        document.onmousemove = null;
    }
}



/**
 * Heatmap
 */

window.drawHeatmap = function(id, data) {
    // script might not be loaded yet
    if (typeof CalHeatMap === "undefined") {
        setTimeout(() => { drawHeatmap(id, data); }, 200); 
        return;
    }
    var cal = new CalHeatMap();
    let legendColors = {
        min: "#dae289",
        max: "#3b6427",
        empty: "lightgrey"
    };
    if (document.body.classList.contains("nightMode")) {
        legendColors = {
            min: "#fed976",     
            max: "#800026",
            empty: "black"
        }
    }
	cal.init({
        data,
        legendColors,
        itemName: ["page", "pages"],
        itemSelector: id,
        considerMissingDataAsZero: true,
        dataType: "json",
        start: new Date(new Date().getFullYear(), 0), 
        maxDate: new Date(),
        range: 12,
        rowLimit: 7,
        domain: "month",
        subDomain: "day"
    });

 }

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./src/scripts.js
var scripts = __webpack_require__(4);

// EXTERNAL MODULE: ./src/pdf_search.js
var pdf_search = __webpack_require__(0);

// EXTERNAL MODULE: ./src/pdf_image.js
var pdf_image = __webpack_require__(1);

// EXTERNAL MODULE: ./src/pdf_events.js
var pdf_events = __webpack_require__(2);

// CONCATENATED MODULE: ./src/pdf_highlighting.js
const Highlighting = {

    /**
     * state
     */
    colorSelected: { id: 1, color: "red" },
    current: [],



    /**
     * Main entry point, called after keyup in text layer with ctrl pressed.
     */
    highlight: function () {
        let s = window.getSelection();
        let r = s.getRangeAt(0);
        $('#text-layer > span').css("height", "auto");
        let clientRects = r.getClientRects();
        if (clientRects.length > 100) {
            readerNotification("Selection too long to highlight.");
            return;
        }
        let rects = this._fuseOverlappingClientRects(clientRects);
        let rectCanvas = document.getElementById("text-layer").getBoundingClientRect();
        let offset = document.getElementById('text-layer').offsetLeft;
        //page group type [x,y,w,h]+ # text
        let cmd = pdfDisplayedCurrentPage + " -1 " + this.colorSelected.id + " ";
        rects.forEach((r) => {
            let x = r.x - rectCanvas.x;
            let y = r.y - rectCanvas.y;
            let conv = pdfDisplayedViewPort.convertToPdfPoint(x, y);

            cmd += conv[0] + " " + conv[1] + " ";
            conv = pdfDisplayedViewPort.convertToPdfPoint(x + r.w, y + r.h);
            cmd += conv[0] + " " + conv[1] + " ";
            // text layer spans seem to be shifted to the top by some pixels, so add a small offset to the highlight div
            this._createHighlightDiv(x + offset, y, r.w, r.h, this.colorSelected.id);

        });
        cmd += "# " + s.toString();
        s.removeAllRanges();
        pycmd("siac-hl-new " + cmd);
        $('#text-layer > span').css("height", "100px");
    },
    insertText: function (event) {
        let rectCanvas = document.getElementById("text-layer").getBoundingClientRect();
        let offset = document.getElementById('text-layer').offsetLeft;

        let x = event.clientX - rectCanvas.x;
        let y = event.clientY - rectCanvas.y;
        this._createHighlightDiv(x + offset, y, 100, 20, this.colorSelected.id, "");
        let cmd = pdfDisplayedCurrentPage + " -1 0 ";
        let conv = pdfDisplayedViewPort.convertToPdfPoint(x, y);
        cmd += conv[0] + " " + conv[1] + " ";
        conv = pdfDisplayedViewPort.convertToPdfPoint(x + 100, y + 20);
        cmd += conv[0] + " " + conv[1] + " #";
        pycmd("siac-hl-new " + cmd);
    },

    displayFakeHighlight: function() {
        this._createHighlightDiv(0,0,50,50,1, -1);
    },

    displayHighlights: function () {
        this._removeAllHighlights();
        let canvas = document.getElementById("siac-pdf-canvas");
        if (!canvas) { return; }
        this.current.forEach((r) => {
            let x0 = r[0];
            let y0 = r[1];
            let x1 = r[2];
            let y1 = r[3];
            let t = r[4];
            let id = r[5];
            let text = r[6];
            let bounds = pdfDisplayedViewPort.convertToViewportRectangle([x0, y0, x1, y1]);
            let x = Math.min(bounds[0], bounds[2]);
            x += canvas.offsetLeft;
            let y = Math.min(bounds[1], bounds[3]);
            let w = Math.abs(bounds[0] - bounds[2]);
            let h = Math.abs(bounds[1] - bounds[3]);
            this._createHighlightDiv(x, y, w, h, t, id, text);

        });
    },

    _removeAllHighlights: function () {
        let all = document.getElementsByClassName('siac-hl');
        while (all[0]) {
            all[0].parentNode.removeChild(all[0]);
        }
    },

    _colorById: function (t) {
        switch (t) {
            case 0: return "white";
            case 1: return "#e65100";
            case 2: return "#558b2f";
            case 3: return "#2196f3";
            case 4: return "#ffee58";
            case 5: return "#ab47bc";
            case 6: return "#e65100";
            case 7: return "#558b2f";
            case 8: return "#2196f3";
        }
    },


    /**
     *  getClientRects returns many overlapping rects for the text layer, so we try to fuse them together 
     */
    _fuseOverlappingClientRects: function (domRectList) {
        let fused = true;
        let x, y, w, h = 0;
        let clientRects = [];
        for (var n = 0; n < domRectList.length; n++) {
            clientRects.push({ x: domRectList[n].x, y: domRectList[n].y, w: domRectList[n].width, h: domRectList[n].height })
        }
        if (clientRects.length === 1) {
            return clientRects;
        }
        while (fused) {
            fused = false;
            let out = [];
            let i1 = 0;
            for (var i0 = 0; i0 < clientRects.length; i0++) {
                if (fused && i1 === i0) {
                    continue;
                }
                x = clientRects[i0].x;
                y = clientRects[i0].y;
                w = clientRects[i0].w;
                h = clientRects[i0].h;

                if (!fused) {
                    for (i1 = 0; i1 < clientRects.length; i1++) {
                        if (i1 === i0) { continue; }

                        // lots of room for improvement, some cases can probably get unified
                        if (clientRects[i1].x === x && clientRects[i1].y === y && clientRects[i1].w === w && clientRects[i1].h !== h) {
                            h = Math.max(clientRects[i1].h, h);
                            fused = true;
                        } else if (clientRects[i1].x === x && clientRects[i1].y === y && clientRects[i1].w !== w && clientRects[i1].h === h) {
                            w = Math.max(clientRects[i1].w, w);
                            fused = true;
                        } else if (clientRects[i1].x === x && clientRects[i1].y !== y && clientRects[i1].w === w && clientRects[i1].h === h) {
                            y = Math.min(y, clientRects[i1].y);
                            fused = true;
                        } else if (clientRects[i1].x !== x && clientRects[i1].y === y && clientRects[i1].w === w && clientRects[i1].h === h) {
                            x = Math.min(x, clientRects[i1].x);
                            fused = true;
                        }

                        else if (clientRects[i1].x !== x && clientRects[i1].y === y && clientRects[i1].w === w && clientRects[i1].h !== h && Math.abs(clientRects[i1].h - h) < 100) {
                            x = Math.min(x, clientRects[i1].x);
                            h = Math.max(clientRects[i1].h, h);
                            fused = true;
                        } else if (clientRects[i1].x !== x && clientRects[i1].y === y && clientRects[i1].h === h) {
                            if (clientRects[i1].x < x) {
                                w = x + w - clientRects[i1].x;
                                x = clientRects[i1].x;
                            } else {
                                w = (clientRects[i1].x + clientRects[i1].w) - x;
                            }
                            fused = true;
                        } else if (clientRects[i1].x === x && clientRects[i1].w === w) {
                            h = Math.max(clientRects[i1].h, h, Math.max(y + h, clientRects[i1].y + clientRects[i1].h) - Math.min(clientRects[i1].y, y));
                            y = Math.min(clientRects[i1].y, y);
                            fused = true;
                        } else if (clientRects[i1].y > y && clientRects[i1].y + clientRects[i1].h < y + h) {
                            w = Math.max(clientRects[i1].w, w, clientRects[i1].x + clientRects[i1].w - Math.min(clientRects[i1].x, x), x + w - Math.min(clientRects[i1].x, x));
                            x = Math.min(clientRects[i1].x, x);
                            fused = true;
                        }  else if (Math.abs(clientRects[i1].y - y) < h) {
                            w = Math.max(clientRects[i1].w, w, clientRects[i1].x + clientRects[i1].w - Math.min(clientRects[i1].x, x), x + w - Math.min(clientRects[i1].x, x));
                            y = Math.min(clientRects[i1].y, y);
                            h = clientRects[i1].h + Math.abs(clientRects[i1].y - y);
                            fused = true;
                        }
                        if (fused) {
                            if (i1 < i0) {
                                out.splice(i1, 1);
                            }
                            break;
                        }
                    }
                }
                // console.assert(x >= 0 && y >= 0 && w >= 0 && h >= 0, "neg value");
                if (out.indexOf({ x, y, w, h }) === -1) {
                    out.push({ x, y, w, h });
                }
            }
            if (fused && clientRects.length === out.length) {
                console.log("something went terribly wrong");
                return clientRects;
            }
            clientRects = Array.from(out);
        }
        return clientRects;
    },
    /**
     * Button at the side of the pdf pane clicked.
     * Switches selected highlighting tool.
     */
    onColorBtn: function (elem) {
        this.colorSelected = { id: Number($(elem).data("id")), color: $(elem).data("color") };
        $('.siac-pdf-color-btn,.siac-pdf-ul-btn').removeClass("active");
        $(elem).addClass("active");
        pycmd("siac-hl-clicked " + this.colorSelected.id + " " + this.colorSelected.color);
        if (this.colorSelected.id > 0) {
            readerNotification("CTRL + select to highlight");
        } else {
            readerNotification("CTRL + click to insert text");
        }
    },

    /**
     * Mouse up in text comment, should check if width has changed (element was resized by dragging), if yes,
     * update db entry. 
     */
    onTextMouseUp: function(event, el) {
        if (!el.dataset.id) {
            return;
        }
        if (el.clientWidth != el.dataset.ow || el.clientHeight != el.dataset.oh) {
            el.dataset.ow = el.clientWidth;
            el.dataset.oh = el.clientHeight;

            let rectCanvas = document.getElementById("text-layer").getBoundingClientRect();
            let x0 = el.offsetLeft - document.getElementById("siac-pdf-canvas").offsetLeft;
            let y0 = el.offsetTop ;
            let x1 = x0 + el.clientWidth; 
            let y1 = y0 + el.clientHeight; 

            let conv = pdfDisplayedViewPort.convertToPdfPoint(x0, y0);
            x0 = conv[0];
            y0 = conv[1];
            conv = pdfDisplayedViewPort.convertToPdfPoint(x1, y1);
            x1 = conv[0];
            y1 = conv[1];

            pycmd(`siac-hl-text-update-coords ${el.dataset.id} ${x0} ${y0} ${x1} ${y1}`);
        }
    },

    /**
     * Text comment loses focus, so save changed content to db. 
     */
    onTextBlur: function(el) {
        if (!el.dataset.id) {
            return;
        }
        pycmd("siac-hl-text-update-text " + el.dataset.id + " " + $(el).val());
    },

    onTextKeyup: function(el) {
        $(el).height(1); 
        $(el).height($(el).prop('scrollHeight') + 1);
        this.onTextMouseUp(null, el);
    },

    /**
     * Clicked on a highlight marker 
     */
    hlClick: function (event, el) {
        if (!el.dataset.id) {
            return;
        }
        if (event.ctrlKey || event.metaKey) {
            $(el).remove();
            pycmd("siac-hl-del " + el.dataset.id);
        }
    },
    /**
     *  create the actual div that will be the highlight and append it to the dom
     */
    _createHighlightDiv: function (x, y, w, h, t, id = -1, text = "") {

        let el;
        //regular highlight
        if (t > 0) {
            el = document.createElement("div");
            el.className = "siac-hl" + (t === 0 ? " siac-text-hl" : "");
            el.style.height = h + "px";
            el.style.width = w + "px";
            el.style.top = y + "px";
            el.style.left = x + "px";
            if (id !== -1) {
                el.dataset.id = id;
            }
            el.setAttribute("onclick", "Highlighting.hlClick(event, this);");
            if (t >= 6)
                el.style.borderBottom = "3px solid " + this._colorById(t);
            else
                el.style.background = this._colorById(t);
        }
        // text highlight 
        else {
            el = document.createElement("textarea");
            el.className = "siac-hl siac-text-hl";
            el.style.height = h + "px";
            el.style.width = w + "px";
            el.style.top = y + "px";
            el.style.left = x + "px";
            if (id !== -1) {
                el.dataset.id = id;
            }
            el.value = text;
            el.setAttribute("onclick", "Highlighting.hlClick(event, this);");
            el.style.background = this._colorById(t);
            el.setAttribute("onmouseup", "Highlighting.onTextMouseUp(event, this);");
            el.setAttribute("onblur", "Highlighting.onTextBlur(this);");
            el.setAttribute("onkeyup", "Highlighting.onTextKeyup(this);");
        }

        document.getElementById("siac-pdf-top").appendChild(el);
        return el;
    }
};
// CONCATENATED MODULE: ./src/pdf_reader.js
// anki-search-inside-add-card
// Copyright (C) 2019 - 2020 Tom Z.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.







window.Highlighting = Highlighting;

/** Pomodoro timer */
window.remainingSeconds = 30 * 60;
window.readingTimer = null;

/** PDF rendering */
window.pdfDisplayed = null;
window.pdfDisplayedViewPort = null;
window.pdfPageRendering = false;
window.pdfDisplayedCurrentPage = null;
window.pdfDisplayedScale = 2.0;
window.pdfHighDPIWasUsed = false;
window.pdfColorMode = "Day";
window.pageNumPending = null;
window.latestRenderTimestamp = null;

/** PDF meta (pages read, marks, extract) */
window.pagesRead = [];
window.pdfExtract = null;
window.pdfDisplayedMarks = null;
window.pdfDisplayedMarksTable = null;
window.pdfLastReadPages = {};

/** State variables */
window.noteLoading = false;
window.pdfLoading = false;
window.modalShown = false;
window.pdfTooltipEnabled = true;
window.iframeIsDisplayed = false;
window.pdfFullscreen = false;
window.pdfBarsHidden = false;
window.displayedNoteId = null;
window.pdfTextLayerMetaKey = false;
window.pdfNotification = {
    queue: [],
    current: ""
};
/** SimpleMDE */
window.textEditor = null;

/** Workaround for older chromium versions. */
if (typeof globalThis === "undefined") {
    var globalThis = window;
}


/**
 * ###########################################
 *  PDF rendering
 * ###########################################
 */

window.pdfFitToPage = function() {
    if (!iframeIsDisplayed) {
        rerenderPDFPage(pdfDisplayedCurrentPage, false, true);
    }
}
window.queueRenderPage = function(num, shouldScrollUp = true, fitToPage = false, isInitial = false, query = '', fetchHighlights = true) {
    if (pdfPageRendering) {
        pageNumPending = num;
    } else {
        rerenderPDFPage(num, shouldScrollUp, fitToPage, isInitial, query, fetchHighlights);
    }
}
window.rerenderPDFPage = function(num, shouldScrollUp = true, fitToPage = false, isInitial = false, query = '', fetchHighlights = true) {
    if (!pdfDisplayed || iframeIsDisplayed) {
        return;
    }
    document.getElementById("siac-pdf-tooltip").style.display = "none";
    document.getElementById("siac-pdf-page-lbl").innerHTML = `${pdfDisplayedCurrentPage} / ${pdfDisplayed.numPages}`;
    Highlighting._removeAllHighlights();
    pdfLoading = true;
    pdfDisplayed.getPage(num)
        .then(function (page) {
            updatePdfDisplayedMarks();
            pdfPageRendering = true;
            var lPage = page;
            var canvas = document.getElementById("siac-pdf-canvas");
            if (fitToPage) {
                var viewport = page.getViewport({ scale: 1.0 });
                pdfDisplayedScale = (canvas.parentNode.clientWidth - 23) / viewport.width;
            }
            var viewport = page.getViewport({ scale: pdfDisplayedScale });
            canvas.height = viewport.height * window.devicePixelRatio;
            canvas.width = viewport.width * window.devicePixelRatio;
            if (window.devicePixelRatio !== 1 || pdfHighDPIWasUsed) {
                pdfHighDPIWasUsed = true;
                canvas.style.height = viewport.height + "px";
                canvas.style.width = viewport.width + "px";
            }
            if (["Peach", "Sand", "Night", "X1", "X2", "Mud"].indexOf(pdfColorMode) !== -1)
                canvas.style.display = "none";
            var ctx = canvas.getContext('2d');
            var pageTimestamp = new Date().getTime();
            latestRenderTimestamp = pageTimestamp;
            var renderTask = page.render({
                canvasContext: ctx,
                viewport: viewport,
                transform: window.devicePixelRatio !== 1 ? [window.devicePixelRatio, 0, 0, window.devicePixelRatio, 0, 0] : null,
                continueCallback: function (cont) {
                    if (latestRenderTimestamp != pageTimestamp) {
                        return;
                    }
                    cont();
                }
            });
            renderTask.promise.then(function () {
                pdfPageRendering = false;
                if (pageNumPending !== null) {
                    rerenderPDFPage(pageNumPending, shouldScrollUp);
                    pageNumPending = null;
                } else {
                    if (["Sand", "Peach", "Night", "X1", "X2", "Mud"].indexOf(pdfColorMode) !== -1) {
                        invertCanvas(ctx);
                    }
                }
                return lPage.getTextContent({ normalizeWhitespace: false, disableCombineTextItems: false });
            }).catch(function (err) { console.log(err); return Promise.reject(); }).then(function (textContent) {
                if (!textContent) {
                    return Promise.reject();
                }
                $("#text-layer").css({ height: canvas.height / window.devicePixelRatio, width: canvas.width / window.devicePixelRatio + 1, left: canvas.offsetLeft }).html('');
                pdfjsLib.renderTextLayer({
                    textContent: textContent,
                    container: document.getElementById("text-layer"),
                    viewport: viewport,
                    textDivs: []
                });
                if (query) {
                    highlightPDFText(query);
                } else {
                    resetSearch();
                }
                pdfLoading = false;
                if (isInitial || query) {
                    ungreyoutBottom();
                }
                if (isInitial) {
                    setTimeout(function () { refreshCanvas(); }, 3000);
                }
                pdfDisplayedViewPort = viewport;
                if (fetchHighlights) {
                    Highlighting.current = [];
                    pycmd("siac-pdf-page-loaded " + pdfDisplayedCurrentPage);
                } else {
                    Highlighting.displayHighlights();
                }
                setLastReadPage();
            });
            if (shouldScrollUp) {
                canvas.parentElement.scrollTop = 0;
            }
            if (pagesRead.indexOf(num) !== -1) {
                document.getElementById('siac-pdf-overlay').style.display = 'block';
                document.getElementById('siac-pdf-read-btn').innerHTML = '<i class="fa fa-book" aria-hidden="true"></i>&nbsp; Unread';
            } else {
                document.getElementById('siac-pdf-overlay').style.display = 'none';
                document.getElementById('siac-pdf-read-btn').innerHTML = '<i class="fa fa-book" aria-hidden="true"></i>&nbsp; Read';
            }
            if (pdfExtract) {
                if (pdfExtract[0] > pdfDisplayedCurrentPage || pdfExtract[1] < pdfDisplayedCurrentPage) {
                    $('#siac-pdf-top').addClass("extract");
                } else {
                    $('#siac-pdf-top').removeClass("extract");
                }
            }
        }).catch(function (err) { setTimeout(function () { console.log(err); }); });
}

window.invertCanvas = function(ctx) {
    if (pdfColorMode === "Night") {
        colorize(ctx, '#2496dc', 0.4);
    } else if (pdfColorMode === 'X1') {
        invert(ctx);
        colorize(ctx, 'teal', 0.4);
        darken(ctx, 'lightsalmon');
    } else if (pdfColorMode === 'X2') {
        invert(ctx);
        colorize(ctx, 'darkslategrey', 0.4);
        darken(ctx, 'coral');
    } else if (pdfColorMode === 'Mud') {
        invert(ctx);
        colorize(ctx, 'coral', 0.3);
        darken(ctx, 'coral');
    } else {
        var imgData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
        var data = imgData.data;
        var mapped;
        var fn;

        switch (pdfColorMode) {
            case "Sand": fn = pxToSandScheme; break;
            case "Peach": fn = pxToPeachScheme; break;
        }
        for (var i = 0; i < data.length; i += 4) {
            mapped = fn(data[i], data[i + 1], data[i + 2]);
            data[i] = mapped.r;
            data[i + 1] = mapped.g;
            data[i + 2] = mapped.b;
        }
        ctx.putImageData(imgData, 0, 0);
    }
    ctx.canvas.style.display = "inline-block";
}
window.refreshCanvas = function() {
    try {
        const ctx = document.getElementById("siac-pdf-canvas").getContext("2d");
        ctx.putImageData(ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height), 0, 0);
    } catch (e) { }
}


/**
 * ###########################################
 *  Buttons & related functions
 * ###########################################
 */

window.pdfPageRight = function() {
    if (!pdfDisplayed || iframeIsDisplayed) {
        return;
    }
    if (pdfDisplayedCurrentPage < pdfDisplayed.numPages) {
        pdfDisplayedCurrentPage++;
        queueRenderPage(pdfDisplayedCurrentPage);
    }
}
window.pdfPageLeft = function() {
    if (!pdfDisplayed || iframeIsDisplayed) {
        return;
    }
    if (pdfDisplayedCurrentPage > 1) {
        pdfDisplayedCurrentPage--;
        queueRenderPage(pdfDisplayedCurrentPage);
    }
}

window.togglePageRead = function(nid) {

    // function can be called from pyqt shortcut, so it might be that no PDF is displayed when shortcut is triggered
    if (!pdfDisplayed) {
        return;
    }

    // don't allow for blue'd out pages in pdf extracts to be marked as read
    if (pdfExtract && (pdfDisplayedCurrentPage < pdfExtract[0] || pdfDisplayedCurrentPage > pdfExtract[1])) {
        return;
    }

    if (!nid) {
        nid = displayedNoteId;
    }

    if (pagesRead.indexOf(pdfDisplayedCurrentPage) === -1) {
        document.getElementById('siac-pdf-overlay').style.display = 'block';
        document.getElementById('siac-pdf-read-btn').innerHTML = '<i class="fa fa-book" aria-hidden="true"></i>&nbsp; Unread';
        pycmd("siac-pdf-page-read " + nid + " " + pdfDisplayedCurrentPage + " " + numPagesExtract());
        if (pagesRead.length) { pagesRead.push(pdfDisplayedCurrentPage); } else { pagesRead = [pdfDisplayedCurrentPage]; }
    } else {
        document.getElementById('siac-pdf-overlay').style.display = 'none';
        document.getElementById('siac-pdf-read-btn').innerHTML = '<i class="fa fa-book" aria-hidden="true"></i>&nbsp; Read';
        pycmd("siac-pdf-page-unread " + nid + " " + pdfDisplayedCurrentPage + " " + numPagesExtract());
        pagesRead.splice(pagesRead.indexOf(pdfDisplayedCurrentPage), 1);
    }
    updatePdfProgressBar();
}
window.pdfHidePageReadMark = function() {
    document.getElementById("siac-pdf-overlay").style.display = "none"; document.getElementById("siac-pdf-read-btn").innerHTML = "\u2713&nbsp; Read";
}
window.pdfShowPageReadMark = function() {
    document.getElementById("siac-pdf-overlay").style.display = "block"; document.getElementById("siac-pdf-read-btn").innerHTML = "&times; Unread";
}
window.pdfJumpToPage = function(e, inp) {
    if (e.keyCode !== 13) {
        return;
    }
    let p = inp.value;
    p = Math.min(pdfDisplayed.numPages, p);
    pdfDisplayedCurrentPage = p;
    queueRenderPage(pdfDisplayedCurrentPage);
}
window.pdfScaleChange = function(mode) {
    if (mode === "up") {
        pdfDisplayedScale += 0.1;
    } else {
        pdfDisplayedScale -= 0.1;
        pdfDisplayedScale = Math.max(0.1, pdfDisplayedScale);
    }
    queueRenderPage(pdfDisplayedCurrentPage, false, false, false, '', false);
}
window.setAllPagesRead = function() {
    if (!pdfExtract) {
        pagesRead = Array.from(Array(pdfDisplayed.numPages).keys()).map(x => ++x)
    } else {
        pagesRead = [];
        for (var i = pdfExtract[0]; i <= pdfExtract[1]; i++) {
            pagesRead.push(i);
        }
    }
    if (pagesRead.indexOf(pdfDisplayedCurrentPage) !== -1) {
        pdfShowPageReadMark();
    }
}
window.saveTextNote = function(nid) {
    let html = "";
    try {
        html = textEditor.value();
    } catch (e) {
        pycmd("siac-notification Could not save text note for some reason.");
        return;
    } 
    readerNotification("&nbsp;Note saved.&nbsp;");
    pycmd("siac-update-note-text " + nid + " " + html);
}
window.toggleQueue = function() {
    if (noteLoading || pdfLoading || modalShown) {
        return;
    }
    let $wr = $("#siac-queue-sched-wrapper");
    if ($wr.hasClass('active')) {
        $wr.css({ "max-width": "0px", "overflow": "hidden" });
        $('.siac-queue-sched-btn:first').addClass("active");
    } else {
        $wr.css({ "max-width": "500px", "overflow": "visible" });
        $('.siac-queue-sched-btn:first').removeClass("active");
    }
    $wr.toggleClass('active');
}
window.queueSchedBtnClicked = function(btn_el) {
    $('#siac-queue-lbl').hide();
    $('.siac-queue-sched-btn').removeClass("active");
    toggleQueue();
    $(btn_el).addClass("active");
}
window.onQuickSchedBtnClicked = function(elem) {
    if (!$(elem).hasClass("expanded")) {
        pycmd("siac-quick-schedule-fill");
    } else {
        $(elem).toggleClass('expanded');
    }
}
window.setLastReadPage = function() {
    pdfLastReadPages[displayedNoteId] = pdfDisplayedCurrentPage;
}
window.getLastReadPage = function() {
    if (displayedNoteId && displayedNoteId in pdfLastReadPages) {
        return pdfLastReadPages[displayedNoteId];
    }
    return null;
}

window.updatePdfProgressBar = function() {
    let percs = Math.floor(pagesRead.length * 10 / numPagesExtract());
    let html = `<span style='margin-right: 10px; display: inline-block; min-width: 35px;'>${Math.trunc(pagesRead.length * 100 / numPagesExtract())} %</span>`;
    for (var c = 0; c < 10; c++) {
        if (c < percs) {
            html += `<div class='siac-prog-sq-filled'></div>`;
        } else {
            html += `<div class='siac-prog-sq'></div>`;
        }
    }
    document.getElementById("siac-prog-bar-wr").innerHTML = html;
}
window.numPagesExtract = function() {
    if (!pdfExtract) {
        return pdfDisplayed.numPages;
    }
    return pdfExtract[1] - pdfExtract[0] + 1;
}

window.markReadUpToCurrent = function() {
    for (var i = 0; i < pdfDisplayedCurrentPage; i++) {
        if (pagesRead.indexOf(i + 1) === -1) {
            if (!pdfExtract || ((i + 1) >= pdfExtract[0] && (i + 1) <= pdfExtract[1])) {
                pagesRead.push(i + 1);
            }
        }
    }
    if (pagesRead.indexOf(pdfDisplayedCurrentPage) !== -1) {
        pdfShowPageReadMark();
    }
}

window.afterRemovedFromQueue = function() {
    toggleQueue();
    $('.siac-queue-sched-btn').first().addClass("active").html('Unqueued');
}

/**
 * ###########################################
 *  Pomodoro timer
 * ###########################################
 */


window._startTimer = function(elementToUpdateId) {
    if (readingTimer) { clearInterval(readingTimer); }
    readingTimer = setInterval(function () {
        remainingSeconds--;
        document.getElementById(elementToUpdateId).innerHTML = Math.floor(remainingSeconds / 60) + " : " + (remainingSeconds % 60 < 10 ? "0" + remainingSeconds % 60 : remainingSeconds % 60);
        if (remainingSeconds <= 0) {
            clearInterval(readingTimer);
            remainingSeconds = 1800;
            $('#siac-timer-play-btn').html("Start").addClass("inactive");
            $('.siac-timer-btn').removeClass('active');
            $('.siac-timer-btn').eq(4).addClass('active');
            document.getElementById(elementToUpdateId).innerHTML = "30 : 00";
            pycmd('siac-timer-elapsed ' + $('#siac-reading-modal-top-bar').data('nid'));
            readingTimer = null;
        }
    }, 999);
}
window.toggleTimer = function(timer) {
    if ($(timer).hasClass('inactive')) {
        $(timer).removeClass("inactive");
        timer.innerHTML = "Pause";
        _startTimer("siac-reading-modal-timer");
    } else {
        clearInterval(readingTimer);
        readingTimer = null;
        $(timer).addClass("inactive");
        timer.innerHTML = "Start";
    }
}
window.resetTimer = function(elem) {
    clearInterval(readingTimer);
    readingTimer = null;
    $('.siac-timer-btn').removeClass('active');
    $(elem).addClass('active');
    remainingSeconds = Number(elem.innerHTML) * 60;
    document.getElementById("siac-reading-modal-timer").innerHTML = Math.floor(remainingSeconds / 60) + " : " + (remainingSeconds % 60 < 10 ? "0" + remainingSeconds % 60 : remainingSeconds % 60);
    $('#siac-timer-play-btn').addClass("inactive").html("Start");
}
window.startTimer = function(mins) {
    $('.siac-timer-btn').each((i, e) => {
        if (e.innerHTML === mins.toString()) {
            resetTimer(e);
            $('#siac-timer-play-btn').trigger('click');
        }
    });
}
window.escapeRegExp = function(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}


/**
 * Display a short message in bottom right area of the reader.
 * No linebreaks! 
 */
window.readerNotification = function(html, immediate) {

    if (!html) { return; }
    if (!immediate && pdfNotification.current != "") {
        if (pdfNotification.queue.length > 0) {
            if (html === pdfNotification.queue[pdfNotification.queue.length - 1]) {
                return;
            }
        } else if (pdfNotification.current === html) {
            return;
        }
        pdfNotification.queue.push(html);
        return;
    }
    pdfNotification.current = html;
    document.getElementById('siac-pdf-br-notify').innerHTML = html;
    document.getElementById('siac-pdf-br-notify').style.display = "block";

    window.setTimeout(() => {
        pdfNotification.current = "";
        if (document.getElementById('siac-pdf-br-notify')) {
            document.getElementById('siac-pdf-br-notify').style.display = "none";
            if (pdfNotification.queue.length) {
                setTimeout(function () {
                    let next = pdfNotification.queue.shift();
                    readerNotification(next, true);
                }, 800);
            }
        } else {
            pdfNotification.queue = [];
        }

    }, 3500);
}
window.swapReadingModal = function() {
    let modal = document.getElementById("siac-reading-modal");
    if (modal.parentNode.id === "siac-right-side") {
        document.getElementById("leftSide").appendChild(modal);
    } else {
        document.getElementById("siac-right-side").appendChild(modal);
    }
}
window.setPDFColorMode = function(mode) {
    $('#siac-pdf-color-mode-btn > span').first().text(mode);
    pdfColorMode = mode;
    rerenderPDFPage(pdfDisplayedCurrentPage, false);
    pycmd('siac-update-config-str pdf.color_mode ' + mode);
    $('#siac-pdf-top').removeClass("siac-pdf-sand siac-pdf-night siac-pdf-peach siac-pdf-day siac-pdf-rose siac-pdf-moss siac-pdf-coral").addClass("siac-pdf-" + pdfColorMode.toLowerCase());
}

window.joinTextLayerNodeTexts = function(nodes, text) {
    let total = "";
    for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].innerHTML === text) {
            return text;
        }
        total += nodes[i].innerHTML += " ";
    }
    total = total.replace("  ", " ");
    let spl = total.split(" ");
    total = "";
    for (var i = 0; i < spl.length; i++) {
        if (spl[i].length > 0 && text.indexOf(spl[i]) >= 0) {
            total += spl[i] + " ";
        }
    }
    return total.trim();
}

window.nodesInSelection = function(range) {
    var lAllChildren = document.getElementById("text-layer").children;
    let nodes = [];
    let inside = false;
    let start = range.startContainer.nodeName === "#text" ? range.startContainer.parentNode : range.startContainer;
    let end = range.endContainer.nodeName === "#text" ? range.endContainer.parentNode : range.endContainer;
    for (var i = 0; i < lAllChildren.length; i++) {
        if (lAllChildren[i] == start) {
            inside = true;
        }
        if (inside) {
            nodes.push(lAllChildren[i]);
        }
        if (lAllChildren[i] == end) {
            break;
        }
    }
    return nodes;
}
window.getSentencesAroundSelection = function(range, nodesInSel, selection) {
    if (!range.startContainer) {
        return;
    }
    selection = selection.replace(/  +/g, " ").trim();
    let currentNode = range.startContainer.parentElement.previousSibling;
    let text = "";
    let height = 0;
    let lastOffsetTop = 0;
    if (nodesInSel.length === 1) {
        text = nodesInSel[0].innerHTML;
        height = nodesInSel[0].clientHeight;
    } else {
        for (var i = 0; i < nodesInSel.length; i++) {
            text += nodesInSel[i].innerHTML + " ";
            height = nodesInSel[i].clientHeight;
        }
    }
    lastOffsetTop = nodesInSel[0].offsetTop;
    text = text.replace(/  +/g, " ").trim();
    let extracted = [];
    if (!currentNode) {
        extracted.push(text);
    }
    while (currentNode) {
        if (Math.abs(currentNode.clientHeight - height) > 5 || lastOffsetTop - currentNode.offsetTop > height * 1.5) {
            extracted.push(text);
            break;
        }
        lastOffsetTop = currentNode.offsetTop;
        text = (currentNode.innerHTML + " " + text).replace(/  +/g, " ").trim();
        let ext = extractPrev(text, extracted, selection);
        extracted = ext[1];
        if (ext[0]) {
            break;
        }
        currentNode = currentNode.previousSibling;
        if (!currentNode) {
            extracted.push(text);
            break;
        }
    }
    let extractedFinal = [];
    for (var i = 0; i < extracted.length; i++) {
        text = extracted[i];
        currentNode = range.endContainer.parentElement.nextSibling;
        if (!currentNode) {
            extractedFinal.push(text);
        }
        while (currentNode) {
            text = (text + " " + currentNode.innerHTML).replace(/  +/g, " ").trim();
            let ext = extractNext(text, extractedFinal, selection);
            extractedFinal = ext[1];
            if (ext[0]) {
                break;
            }
            currentNode = currentNode.nextSibling;
            if (!currentNode) {
                extractedFinal.push(text);
                break;
            }
        }
    }
    return extractedFinal;
}

window.sendClozes = function() {
    let sentences = $('#siac-pdf-tooltip').data("sentences");
    let selection = $('#siac-pdf-tooltip').data("selection");
    pycmd("siac-show-cloze-modal " + selection + "$$$" + sentences.join("$$$"));
}
window.generateClozes = function() {
    let cmd = "";
    $('.siac-cl-row').each(function (i, elem) {
        cmd += "$$$" + $(elem.children[0].children[0]).text();
    });
    let pdfPath = $('#siac-pdf-top').data("pdfpath");
    let pdfTitle = $('#siac-pdf-top').data("pdftitle");
    pycmd('siac-generate-clozes $$$' + pdfTitle + "$$$" + pdfPath + "$$$" + pdfDisplayedCurrentPage + cmd);
    $('#siac-pdf-tooltip').hide();
}

window.extractPrev = function(text, extracted, selection) {
    text = text.substring(0, text.lastIndexOf(selection) + selection.length) + text.substring(text.lastIndexOf(selection) + selection.length).replace(/\./g, "$DOT$");
    let matches = text.match(/.*[^.\d][.!?]"? (.+)/);
    if (!matches || matches[1].indexOf(selection) === -1) {
        return [false, extracted];
    }
    let ext = matches[1].replace(/\$DOT\$/g, ".");
    if (extracted.indexOf(ext) === -1) {
        extracted.push(ext);
    }
    return [true, extracted];

}
window.extractNext = function(text, extracted, selection) {
    text = text.substring(0, text.indexOf(selection)).replace(/\./g, "$DOT$") + text.substring(text.indexOf(selection));

    let matches = text.match(/(.+?(\.\.\.(?!,| [a-z])|[^.]\.(?!(\.|[0-9]|[A-Z]{2,20}))|[!?]|[^0-9]\. [A-Z])).*/);
    if (!matches || matches[1].indexOf(selection) === -1) {
        return [false, extracted];
    }
    let ext = matches[1].replace(/\$DOT\$/g, ".");
    if (extracted.indexOf(ext) === -1) {
        extracted.push(ext);
    }
    return [true, extracted];
}
window.pxToSandScheme = function(red, green, blue) {
    if (red > 240 && green > 240 && blue > 240) { return { r: 241, g: 206, b: 147 }; }
    if (Math.abs(red - green) < 15 && Math.abs(red - blue) < 15) {
        red = Math.max(0, red - 40);
        green = Math.max(0, green - 40);
        blue = Math.max(0, blue - 40);
        return { r: red, g: green, b: blue };
    }
    if (red < 100 && green < 100 && blue < 100) { return { r: 0, g: 0, b: 0 }; }
    return { r: red, g: green, b: blue };
}
window.pxToPeachScheme = function(red, green, blue) {
    if (red > 240 && green > 240 && blue > 240) { return { r: 237, g: 209, b: 176 }; }
    if (Math.abs(red - green) < 15 && Math.abs(red - blue) < 15) {
        red = Math.max(0, red - 40);
        green = Math.max(0, green - 40);
        blue = Math.max(0, blue - 40);
        return { r: red, g: green, b: blue };
    }
    if (red < 100 && green < 100 && blue < 100) { return { r: 0, g: 0, b: 0 }; }
    return { r: red, g: green, b: blue };
}
window.colorize = function(context, color, alpha) {
    context.globalCompositeOperation = "source-atop";
    context.globalAlpha = alpha;
    context.fillStyle = color;
    context.fillRect(0, 0, context.canvas.width, context.canvas.height);
    context.globalCompositeOperation = "source-over";
    context.globalAlpha = 1.0;
}
window.invert = function(ctx) {
    ctx.globalCompositeOperation='difference';
    ctx.fillStyle='white';
    ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height);
}
window.darken = function(ctx, color) {
    ctx.globalCompositeOperation='darken';
    ctx.fillStyle=color;
    ctx.fillRect(0,0,ctx.canvas.width,ctx.canvas.height);
}
window.updatePdfDisplayedMarks = function() {
    if (pdfDisplayedMarks == null) {
        return;
    }
    let html = "";
    $('.siac-mark-btn-inner').removeClass('active');
    if (pdfDisplayedCurrentPage in pdfDisplayedMarks) {
        for (var i = 0; i < pdfDisplayedMarks[pdfDisplayedCurrentPage].length; i++) {
            switch (pdfDisplayedMarks[pdfDisplayedCurrentPage][i]) {
                case 1: html += "<div class='siac-pdf-mark-lbl'>Revisit &nbsp;<b onclick='$(\".siac-mark-btn-inner-1\").trigger(\"click\");'>&times</b></div>"; $('.siac-mark-btn-inner-1').first().addClass('active'); break;
                case 2: html += "<div class='siac-pdf-mark-lbl'>Hard &nbsp;<b onclick='$(\".siac-mark-btn-inner-2\").trigger(\"click\");'>&times</b></div>"; $('.siac-mark-btn-inner-2').first().addClass('active'); break;
                case 3: html += "<div class='siac-pdf-mark-lbl'>More Info &nbsp;<b onclick='$(\".siac-mark-btn-inner-3\").trigger(\"click\");'>&times</b></div>"; $('.siac-mark-btn-inner-3').first().addClass('active'); break;
                case 4: html += "<div class='siac-pdf-mark-lbl'>More Cards &nbsp;<b onclick='$(\".siac-mark-btn-inner-4\").trigger(\"click\");'>&times</b></div>"; $('.siac-mark-btn-inner-4').first().addClass('active'); break;
                case 5: html += "<div class='siac-pdf-mark-lbl'>Bookmark &nbsp;<b onclick='$(\".siac-mark-btn-inner-5\").trigger(\"click\");'>&times</b></div>"; $('.siac-mark-btn-inner-5').first().addClass('active'); break;
            }
        }
    }
    let w1 = document.getElementById("siac-queue-readings-list").offsetWidth;
    let w2 = document.getElementById("siac-queue-actions").offsetWidth;
    let w = document.getElementById("siac-reading-modal-bottom-bar").clientWidth - w1 - w2 - 100;
    var tableHtml = "";
    Object.keys(pdfDisplayedMarksTable).forEach(function (key) {
        let name = "";
        switch (key) {
            case "1": name = "Revisit"; break;
            case "2": name = "Hard"; break;
            case "3": name = "More Info"; break;
            case "4": name = "More Cards"; break;
            case "5": name = "Bookmark"; break;
        }
        let pages = "";

        for (var i = 0; i < pdfDisplayedMarksTable[key].length; i++) {
            pages += "<span class='siac-page-mark-link'>" + pdfDisplayedMarksTable[key][i] + "</span>, ";
        }
        pages = pages.length > 0 ? pages.substring(0, pages.length - 2) : pages;
        tableHtml += `<tr style='color: grey;'><td><b>${name}</b></td><td>${pages}</td></tr>`;
    });
    if (tableHtml.length) {
        tableHtml = `<table style='user-select: none; table-layout: fixed; max-width: ${w}px;'>` + tableHtml + "</table>";
    }
    if (document.getElementById("siac-pdf-overlay-top-lbl-wrap"))
        document.getElementById("siac-pdf-overlay-top-lbl-wrap").innerHTML = html;
    if (document.getElementById("siac-marks-display")) { document.getElementById("siac-marks-display").innerHTML = tableHtml; }
    onMarkBtnClicked(document.getElementById("siac-mark-jump-btn"));

}

/**
 * 'Done' Shortcut activated in qt.
 */
window.doneShortcut = function() {
    if (!pdfLoading && !noteLoading && !modalShown && document.body.classList.contains("siac-reading-modal-displayed")) {
        $('#siac-first-in-queue-btn').trigger("click");
    }
}
/**
 * 'Later' Shortcut activated in qt.
 */
window.laterShortcut = function() {
    if (!pdfLoading && !noteLoading && !modalShown && document.body.classList.contains("siac-reading-modal-displayed") && document.getElementById('siac-later-btn')) {
        $('#siac-later-btn').trigger("click");
    }
}
window.jumpLastPageShortcut = function() {
    if (pdfLoading || noteLoading || modalShown || !pdfDisplayed) {
        return;
    }
    pdfDisplayedCurrentPage = pdfDisplayed.numPages;
    queueRenderPage(pdfDisplayedCurrentPage, true);
}
window.jumpFirstPageShortcut = function() {
    if (pdfLoading || noteLoading || modalShown || !pdfDisplayed) {
        return;
    }
    pdfDisplayedCurrentPage = 1;
    queueRenderPage(1, true);
}


window.togglePDFSelect = function(elem) {
    if (!elem) {
        elem = document.getElementById('siac-pdf-tooltip-toggle');
    }
    if (!elem) {
        return;
    }
    pdfTooltipEnabled = !pdfTooltipEnabled;
    if (pdfTooltipEnabled) {
        $(elem).addClass('active');
        readerNotification("Search on select enabled.", true);
    } else {
        $(elem).removeClass('active');
        $('#siac-pdf-tooltip').hide();
        readerNotification("Search on select disabled.", true);
    }
}
window.onMarkBtnClicked = function(elem) {
    if ($(elem).hasClass("expanded")) {
        if (pdfDisplayedMarks && Object.keys(pdfDisplayedMarks).length > 0) {
            document.getElementById("siac-mark-jump-btn-inner").innerHTML = "<b onclick='event.stopPropagation(); jumpToNextMark();' style='vertical-align: middle;'>Jump to Next Mark</b>";
        } else {
            document.getElementById("siac-mark-jump-btn-inner").innerHTML = "<b style='vertical-align:middle; color: grey;'>No Marks in PDF</b>";
        }
    }
}
window.jumpToNextMark = function() {
    if (!pdfDisplayed) {
        return;
    }
    let pages = Object.keys(pdfDisplayedMarks);
    for (var i = 0; i < pages.length; i++) {
        if (Number(pages[i]) > pdfDisplayedCurrentPage) {
            pdfDisplayedCurrentPage = Number(pages[i]);
            queueRenderPage(pdfDisplayedCurrentPage, true, false, false);
            return;
        }
    }
    pdfDisplayedCurrentPage = Number(pages[0]);
    queueRenderPage(pdfDisplayedCurrentPage, true, false, false);
}
window.bringPDFIntoView = function() {
    if ($('#siac-right-side').hasClass("addon-hidden") || $('#switchBtn').is(":visible")) {
        toggleAddon();
    }
}
window.beforeNoteQuickOpen = function() {
    if (noteLoading || pdfLoading || modalShown) {
        return false;
    }
    if (pdfDisplayed) {
        noteLoading = true;
        greyoutBottom();
        destroyPDF();
    }
    bringPDFIntoView();
    return true;
}

window.centerTooltip = function() {
    let w = $('#siac-pdf-top').width();
    let h = $('#siac-pdf-top').height();
    let $tt = $('#siac-pdf-tooltip');
    $tt.css({ 'top': h / 2 - ($tt.height() / 2), 'left': w / 2 - ($tt.width() / 2) });
}
window.destroyPDF = function() {
    if (pdfDisplayed) {
        pdfDisplayed.destroy();
    }
    pdfDisplayed = null;
}
window.pdfUrlSearch = function(input) {
    if (!input.length) { return; }
    let url = "";
    $("#siac-iframe-btn tr").each(function () {
        if ($(this.children[1].children[0]).is(":checked")) {
            url = $(this.children[1].children[0]).data("url");
        }
    });
    pycmd('siac-url-srch $$$' + input + '$$$' + url);
    $('#siac-iframe-btn').removeClass('expanded');
}
window.showQueueInfobox = function(elem, nid) {
    if (pdfLoading || noteLoading || modalShown) { return; }
    pycmd('siac-queue-info ' + nid);
    document.documentElement.style.setProperty('--ttop', (elem.offsetTop) + 'px');
    if (pdfLoading || noteLoading || modalShown) { return; }

}
window.leaveQueueItem = function(elem) {
    window.setTimeout(function () {
        if (!$('#siac-queue-infobox').is(":hover") && !$('#siac-queue-readings-list .siac-clickable-anchor:hover').length) {
            hideQueueInfobox();
        }
    }, 400);
}
window.hideQueueInfobox = function() {
    if (document.getElementById("siac-queue-infobox")) {
        document.getElementById("siac-queue-infobox").style.display = "none";
        document.getElementById("siac-pdf-bottom-tabs").style.visibility = "visible";
    }
}
window.greyoutBottom = function() {
    $('#siac-reading-modal-bottom-bar .siac-clickable-anchor,#siac-reading-modal-bottom-bar .fa,.siac-queue-sched-btn,#siac-reading-modal-bottom-bar .siac-queue-picker-icn,#siac-reading-modal-bottom-bar .blue-hover, .siac-page-mark-link,.siac-sched-icn').addClass("siac-disabled");
}
window.ungreyoutBottom = function() {
    $('#siac-reading-modal-bottom-bar .siac-clickable-anchor,#siac-reading-modal-bottom-bar .fa,.siac-queue-sched-btn,#siac-reading-modal-bottom-bar .siac-queue-picker-icn, #siac-reading-modal-bottom-bar .blue-hover, .siac-page-mark-link,.siac-sched-icn').removeClass("siac-disabled");
}
window.unhideQueue = function(nid) {
    if (pdfLoading || noteLoading || modalShown) { return; }
    pycmd("siac-unhide-pdf-queue " + nid);
}
window.hideQueue = function(nid) {
    if (pdfLoading || noteLoading || modalShown) { return; }
    pycmd("siac-hide-pdf-queue " + nid);
}
window.toggleReadingModalBars = function() {
    if (!pdfBarsHidden) {
        document.getElementById("siac-reading-modal-top-bar").style.display = "none";
        document.getElementById("siac-reading-modal-bottom-bar").style.display = "none";
        pdfBarsHidden = true;
    } else {
        document.getElementById("siac-reading-modal-top-bar").style.display = "flex";
        document.getElementById("siac-reading-modal-bottom-bar").style.display = "block";
        pdfBarsHidden = false;
    }
}

window.toggleReadingModalFullscreen = function() {
    pdfFullscreen = !pdfFullscreen;
    if (pdfFullscreen) {
        $(document.body).removeClass("siac-fullscreen-show-fields").addClass("siac-fullscreen-show-right");
        if (pdfDisplayed) {
            pdfFitToPage();
        }
        pdfBarsHidden = false;
        toggleReadingModalBars();
        pycmd("siac-notification Press toggle shortcut (default Ctrl+F) to switch.");

    } else {

        $(document.body).removeClass("siac-fullscreen-show-fields").removeClass("siac-fullscreen-show-right");
        if ($('#switchBtn').is(":visible")) {
            $('#outerWr').addClass("onesided");
        }
        onWindowResize();
        if (pdfDisplayed) {
            pdfFitToPage();
        }
    }

}
window.activateReadingModalFullscreen = function() {
    pdfFullscreen = false;
    pdfBarsHidden = true;
    toggleReadingModalFullscreen();
}
window.onReadingModalClose = function() {
    if (pdfLoading) {
        return;
    }
    displayedNoteId = null;
    $(document.body).removeClass("siac-fullscreen-show-fields").removeClass("siac-fullscreen-show-right").removeClass('siac-reading-modal-displayed');
    $('#siac-left-tab-browse,#siac-left-tab-pdfs,#siac-reading-modal-tabs-left').remove();
    $('#fields').show();
    $("#siac-reading-modal").hide();
    document.getElementById('resultsArea').style.display = 'block';
    document.getElementById('bottomContainer').style.display = 'block';
    document.getElementById('topContainer').style.display = 'flex';
    destroyPDF();
    document.getElementById("siac-reading-modal-center").innerHTML = "";
    onWindowResize();
    window.$fields = $('.field');
    if (siacState.searchOnTyping) {
        setSearchOnTyping(true, false);
    }
    pycmd("siac-on-reading-modal-close")
}
window.tryExtractTextFromTextNote = function() {
    saveTextNote($('#siac-reading-modal-top-bar').data('nid'), remove = false);
    pycmd("siac-try-copy-text-note");
}



window.modalTabsLeftClicked = function(tab, elem) {
    $('#siac-reading-modal-tabs-left .siac-btn').removeClass("active");
    $(elem).addClass("active");
    pycmd("siac-reading-modal-tabs-left-" + tab);
}

window.setPdfTheme = function(theme) {
    let style_tag = document.getElementById("siac-pdf-css");
    style_tag.href = style_tag.href.substring(0, style_tag.href.lastIndexOf("/") + 1) + theme;
    pycmd("siac-eval update_config('pdf.theme', '" + theme + "')");
}
window.schedChange = function(slider) {
    document.getElementById('siac-sched-prio-val').innerHTML = prioVerbose(slider.value);
}
window.prioVerbose = function(prio) {
    if (prio >= 85)
        return `Very high (<b>${prio}</b>)`;
    if (prio >= 70)
        return `High (<b>${prio}</b>)`;
    if (prio >= 30)
        return `Medium (<b>${prio}</b>)`;
    if (prio >= 15)
        return `Low (<b>${prio}</b>)`;
    if (prio >= 1)
        return `Very low (<b>${prio}</b>)`;
    return "Remove from Queue (<b>0</b>)";
}
window.schedChanged = function(slider, nid) {
    $('#siac-quick-sched-btn').removeClass('expanded');
    pycmd("siac-requeue " + nid + " " + slider.value);
}
window.schedSmallChanged = function(slider, nid) {
    pycmd("siac-requeue " + nid + " " + slider.value);
}
window.schedSmallChange = function(slider) {
    document.getElementById('siac-slider-small-lbl').innerHTML = slider.value;
}

window.scheduleDialogQuickAction = function() {
    let cmd = $("input[name=sched]:checked").data("pycmd");
    pycmd(`siac-eval index.ui.reading_modal.schedule_note(${cmd})`);
}
window.removeDialogOk = function(nid) {
    if ($("input[name=del]:checked").data("pycmd") == "1") {
        pycmd("siac-remove-from-queue " + nid);
    } else {
        pycmd("siac-delete-current-user-note " + nid);
    }
    modalShown = false;
    $('#siac-var(--c-reading-modal-background)out').hide();
    $('#siac-schedule-dialog').hide();
}
window.updateSchedule = function() {
    let checked = $("input[name=sched]:checked").data("pycmd");
    if (checked == "4") {
        let td = document.getElementById("siac-sched-td-inp").value;
        if (!td) { pycmd('siac-notification Value is empty!'); return; }
        pycmd("siac-update-schedule td " + td);
    } else if (checked == "5") {
        let w = '';
        $('#siac-sched-wd input').each(function (ix) {
            if ($(this).is(":checked")) {
                w += (ix + 1).toString();
            }
        });
        if (!w.length) { pycmd('siac-notification Value is empty!'); return; }
        pycmd("siac-update-schedule wd " + w);
    } else {
        let id = document.getElementById("siac-sched-id-inp").value;
        if (!id) { pycmd('siac-notification Value is empty!'); return; }
        pycmd("siac-update-schedule id " + id);
    }
}



window.editorMDInit = function() {
    textEditor = new SimpleMDE({ element: document.getElementById("siac-text-top").children[0],
    indentWithTabs: true,
    autoDownloadFontAwesome: false,
    autosave: { enabled: false },
    placeholder: "",
    status: false,
    tagSize: 4,
    toolbar: ["bold", "italic", "heading", "code", "quote", "unordered-list", "ordered-list", "horizontal-rule", "link"]
});
}

window.modalBgUpdate = function() {
    $("#siac-modal-bg-update .siac-clickable-anchor").addClass('siac-disabled');
    setTimeout(function() {
        $("#siac-modal-bg-update .siac-clickable-anchor").removeClass('siac-disabled');
    }, 1200);
}
//
// helpers
//

window.windowHasSelection = function() {
    return window.getSelection().toString().length;
}
// EXTERNAL MODULE: ./styles.css
var styles = __webpack_require__(5);

// CONCATENATED MODULE: ./src/entry.js









/***/ })
/******/ ])));